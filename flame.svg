<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="406.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="389" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="389" > </text>
<g id="frames">
<g >
<title>__schedule (2 samples, 0.08%)</title><rect x="895.2" y="149" width="0.9" height="15.0" fill="rgb(253,136,22)" rx="2" ry="2" />
<text  x="898.23" y="159.5" ></text>
</g>
<g >
<title>__lll_unlock_wake (1 samples, 0.04%)</title><rect x="1172.6" y="277" width="0.4" height="15.0" fill="rgb(208,37,9)" rx="2" ry="2" />
<text  x="1175.55" y="287.5" ></text>
</g>
<g >
<title>__do_page_fault      (3 samples, 0.12%)</title><rect x="47.2" y="149" width="1.4" height="15.0" fill="rgb(212,106,13)" rx="2" ry="2" />
<text  x="50.19" y="159.5" ></text>
</g>
<g >
<title>do_futex (3 samples, 0.12%)</title><rect x="22.9" y="261" width="1.3" height="15.0" fill="rgb(238,156,12)" rx="2" ry="2" />
<text  x="25.86" y="271.5" ></text>
</g>
<g >
<title>write (2 samples, 0.08%)</title><rect x="10.0" y="309" width="0.9" height="15.0" fill="rgb(231,24,48)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>void OopOopIterateDispatch&lt;PCAdjustPointerClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(PCAdjustPointerClosure*, oopDesc*, Klass*)      (5 samples, 0.19%)</title><rect x="35.3" y="181" width="2.2" height="15.0" fill="rgb(240,227,42)" rx="2" ry="2" />
<text  x="38.25" y="191.5" ></text>
</g>
<g >
<title>irq_exit (1 samples, 0.04%)</title><rect x="239.1" y="149" width="0.5" height="15.0" fill="rgb(243,169,7)" rx="2" ry="2" />
<text  x="242.11" y="159.5" ></text>
</g>
<g >
<title>void OopOopIterateDispatch&lt;PCAdjustPointerClosure&gt;::Table::oop_oop_iterate&lt;ObjArrayKlass, unsigned int&gt;(PCAdjustPointerClosure*, oopDesc*, Klass*) (10 samples, 0.39%)</title><rect x="235.0" y="213" width="4.6" height="15.0" fill="rgb(246,164,18)" rx="2" ry="2" />
<text  x="237.98" y="223.5" ></text>
</g>
<g >
<title>__handle_mm_fault      (1 samples, 0.04%)</title><rect x="1139.0" y="165" width="0.5" height="15.0" fill="rgb(253,159,26)" rx="2" ry="2" />
<text  x="1142.04" y="175.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.04%)</title><rect x="234.1" y="197" width="0.4" height="15.0" fill="rgb(236,19,2)" rx="2" ry="2" />
<text  x="237.06" y="207.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore      (1 samples, 0.04%)</title><rect x="805.2" y="69" width="0.5" height="15.0" fill="rgb(213,55,18)" rx="2" ry="2" />
<text  x="808.24" y="79.5" ></text>
</g>
<g >
<title>irq_exit (1 samples, 0.04%)</title><rect x="301.6" y="149" width="0.4" height="15.0" fill="rgb(245,118,28)" rx="2" ry="2" />
<text  x="304.56" y="159.5" ></text>
</g>
<g >
<title>rcu_process_callbacks (1 samples, 0.04%)</title><rect x="1048.6" y="149" width="0.4" height="15.0" fill="rgb(206,220,14)" rx="2" ry="2" />
<text  x="1051.58" y="159.5" ></text>
</g>
<g >
<title>call_timer_fn (1 samples, 0.04%)</title><rect x="805.7" y="117" width="0.5" height="15.0" fill="rgb(238,75,30)" rx="2" ry="2" />
<text  x="808.70" y="127.5" ></text>
</g>
<g >
<title>_new_array_Java (1 samples, 0.04%)</title><rect x="1189.5" y="165" width="0.5" height="15.0" fill="rgb(243,108,47)" rx="2" ry="2" />
<text  x="1192.54" y="175.5" ></text>
</g>
<g >
<title>irq_exit (3 samples, 0.12%)</title><rect x="893.9" y="165" width="1.3" height="15.0" fill="rgb(241,198,23)" rx="2" ry="2" />
<text  x="896.85" y="175.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (2 samples, 0.08%)</title><rect x="895.2" y="181" width="0.9" height="15.0" fill="rgb(206,180,14)" rx="2" ry="2" />
<text  x="898.23" y="191.5" ></text>
</g>
<g >
<title>ParMarkBitMap::live_words_in_range(ParCompactionManager*, HeapWordImpl**, oopDesc*) const      (1 samples, 0.04%)</title><rect x="37.5" y="165" width="0.5" height="15.0" fill="rgb(243,95,24)" rx="2" ry="2" />
<text  x="40.55" y="175.5" ></text>
</g>
<g >
<title>VMThread::loop() (7 samples, 0.27%)</title><rect x="1173.9" y="261" width="3.2" height="15.0" fill="rgb(243,39,33)" rx="2" ry="2" />
<text  x="1176.93" y="271.5" ></text>
</g>
<g >
<title>[UNKNOWN] (6 samples, 0.23%)</title><rect x="47.2" y="197" width="2.7" height="15.0" fill="rgb(211,224,4)" rx="2" ry="2" />
<text  x="50.19" y="207.5" ></text>
</g>
<g >
<title>ParallelCompactData::calc_new_pointer(HeapWordImpl**, ParCompactionManager*) (6 samples, 0.23%)</title><rect x="40.8" y="165" width="2.7" height="15.0" fill="rgb(215,47,43)" rx="2" ry="2" />
<text  x="43.76" y="175.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.04%)</title><rect x="1172.6" y="261" width="0.4" height="15.0" fill="rgb(249,110,18)" rx="2" ry="2" />
<text  x="1175.55" y="271.5" ></text>
</g>
<g >
<title>ParallelCompactData::calc_new_pointer(HeapWordImpl**, ParCompactionManager*)      (6 samples, 0.23%)</title><rect x="38.0" y="165" width="2.8" height="15.0" fill="rgb(217,53,13)" rx="2" ry="2" />
<text  x="41.01" y="175.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.04%)</title><rect x="239.1" y="181" width="0.5" height="15.0" fill="rgb(245,151,13)" rx="2" ry="2" />
<text  x="242.11" y="191.5" ></text>
</g>
<g >
<title>Interpreter (28 samples, 1.09%)</title><rect x="1177.1" y="213" width="12.9" height="15.0" fill="rgb(254,175,34)" rx="2" ry="2" />
<text  x="1180.14" y="223.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.04%)</title><rect x="239.6" y="229" width="0.4" height="15.0" fill="rgb(230,227,52)" rx="2" ry="2" />
<text  x="242.57" y="239.5" ></text>
</g>
<g >
<title>VMThread::run() (7 samples, 0.27%)</title><rect x="1173.9" y="277" width="3.2" height="15.0" fill="rgb(241,11,26)" rx="2" ry="2" />
<text  x="1176.93" y="287.5" ></text>
</g>
<g >
<title>__softirqentry_text_start      (2 samples, 0.08%)</title><rect x="1035.7" y="149" width="0.9" height="15.0" fill="rgb(238,90,44)" rx="2" ry="2" />
<text  x="1038.73" y="159.5" ></text>
</g>
<g >
<title>swake_up (1 samples, 0.04%)</title><rect x="805.2" y="85" width="0.5" height="15.0" fill="rgb(252,17,12)" rx="2" ry="2" />
<text  x="808.24" y="95.5" ></text>
</g>
<g >
<title>__softirqentry_text_start      (1 samples, 0.04%)</title><rect x="1039.9" y="181" width="0.4" height="15.0" fill="rgb(241,205,45)" rx="2" ry="2" />
<text  x="1042.86" y="191.5" ></text>
</g>
<g >
<title>void OopOopIterateDispatch&lt;PCAdjustPointerClosure&gt;::Table::oop_oop_iterate&lt;ObjArrayKlass, unsigned int&gt;(PCAdjustPointerClosure*, oopDesc*, Klass*) (16 samples, 0.62%)</title><rect x="294.7" y="245" width="7.3" height="15.0" fill="rgb(235,72,36)" rx="2" ry="2" />
<text  x="297.67" y="255.5" ></text>
</g>
<g >
<title>ParallelCompactData::add_obj(HeapWordImpl**, unsigned long)      (190 samples, 7.39%)</title><rect x="806.6" y="213" width="87.3" height="15.0" fill="rgb(223,10,21)" rx="2" ry="2" />
<text  x="809.61" y="223.5" >ParallelCo..</text>
</g>
<g >
<title>VMThread::evaluate_operation(VM_Operation*) [clone .constprop.68] (7 samples, 0.27%)</title><rect x="1173.9" y="245" width="3.2" height="15.0" fill="rgb(227,97,14)" rx="2" ry="2" />
<text  x="1176.93" y="255.5" ></text>
</g>
<g >
<title>ParMarkBitMap::mark_obj(HeapWordImpl**, unsigned long) (11 samples, 0.43%)</title><rect x="801.6" y="213" width="5.0" height="15.0" fill="rgb(219,17,23)" rx="2" ry="2" />
<text  x="804.56" y="223.5" ></text>
</g>
<g >
<title>call_timer_fn (1 samples, 0.04%)</title><rect x="239.6" y="149" width="0.4" height="15.0" fill="rgb(229,205,30)" rx="2" ry="2" />
<text  x="242.57" y="159.5" ></text>
</g>
<g >
<title>__softirqentry_text_start      (2 samples, 0.08%)</title><rect x="1138.1" y="181" width="0.9" height="15.0" fill="rgb(212,31,44)" rx="2" ry="2" />
<text  x="1141.12" y="191.5" ></text>
</g>
<g >
<title>call_stub (28 samples, 1.09%)</title><rect x="1177.1" y="229" width="12.9" height="15.0" fill="rgb(216,6,12)" rx="2" ry="2" />
<text  x="1180.14" y="239.5" ></text>
</g>
<g >
<title>Main.count      (5 samples, 0.19%)</title><rect x="1177.1" y="197" width="2.3" height="15.0" fill="rgb(209,50,54)" rx="2" ry="2" />
<text  x="1180.14" y="207.5" ></text>
</g>
<g >
<title>rcu_gp_kthread_wake (1 samples, 0.04%)</title><rect x="1048.6" y="117" width="0.4" height="15.0" fill="rgb(215,145,32)" rx="2" ry="2" />
<text  x="1051.58" y="127.5" ></text>
</g>
<g >
<title>ParallelCompactData::calc_new_pointer(HeapWordImpl**, ParCompactionManager*)      (85 samples, 3.31%)</title><rect x="195.0" y="197" width="39.1" height="15.0" fill="rgb(228,165,36)" rx="2" ry="2" />
<text  x="198.04" y="207.5" >Par..</text>
</g>
<g >
<title>VbglR0GRPerform      (1 samples, 0.04%)</title><rect x="239.6" y="101" width="0.4" height="15.0" fill="rgb(229,129,0)" rx="2" ry="2" />
<text  x="242.57" y="111.5" ></text>
</g>
<g >
<title>PSParallelCompact::fill_region(ParCompactionManager*, unsigned long) (59 samples, 2.30%)</title><rect x="24.2" y="229" width="27.1" height="15.0" fill="rgb(236,91,14)" rx="2" ry="2" />
<text  x="27.23" y="239.5" >P..</text>
</g>
<g >
<title>smp_apic_timer_interrupt (3 samples, 0.12%)</title><rect x="893.9" y="181" width="1.3" height="15.0" fill="rgb(216,226,41)" rx="2" ry="2" />
<text  x="896.85" y="191.5" ></text>
</g>
<g >
<title>ParMarkBitMap::iterate(ParMarkBitMapClosure*, ParMarkBitMapClosure*, unsigned long, unsigned long, unsigned long) const      (136 samples, 5.29%)</title><rect x="54.5" y="245" width="62.5" height="15.0" fill="rgb(226,118,17)" rx="2" ry="2" />
<text  x="57.54" y="255.5" >ParMar..</text>
</g>
<g >
<title>__softirqentry_text_start      (1 samples, 0.04%)</title><rect x="10.5" y="213" width="0.4" height="15.0" fill="rgb(253,70,44)" rx="2" ry="2" />
<text  x="13.46" y="223.5" ></text>
</g>
<g >
<title>CompiledMethod::unload_nmethod_caches(bool) (2 samples, 0.08%)</title><rect x="1173.9" y="117" width="0.9" height="15.0" fill="rgb(239,195,53)" rx="2" ry="2" />
<text  x="1176.93" y="127.5" ></text>
</g>
<g >
<title>irq_exit (2 samples, 0.08%)</title><rect x="1035.7" y="165" width="0.9" height="15.0" fill="rgb(245,64,3)" rx="2" ry="2" />
<text  x="1038.73" y="175.5" ></text>
</g>
<g >
<title>run_timer_softirq (1 samples, 0.04%)</title><rect x="805.7" y="133" width="0.5" height="15.0" fill="rgb(227,53,23)" rx="2" ry="2" />
<text  x="808.70" y="143.5" ></text>
</g>
<g >
<title>__softirqentry_text_start      (8 samples, 0.31%)</title><rect x="801.6" y="149" width="3.6" height="15.0" fill="rgb(243,109,20)" rx="2" ry="2" />
<text  x="804.56" y="159.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore      (1 samples, 0.04%)</title><rect x="1048.6" y="85" width="0.4" height="15.0" fill="rgb(242,95,25)" rx="2" ry="2" />
<text  x="1051.58" y="95.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.04%)</title><rect x="1040.3" y="213" width="0.5" height="15.0" fill="rgb(232,91,46)" rx="2" ry="2" />
<text  x="1043.32" y="223.5" ></text>
</g>
<g >
<title>all (2,570 samples, 100%)</title><rect x="10.0" y="357" width="1180.0" height="15.0" fill="rgb(221,122,21)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>void OopOopIterateDispatch&lt;PCIterateMarkAndPushClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(PCIterateMarkAndPushClosure*, oopDesc*, Klass*) (7 samples, 0.27%)</title><rect x="1035.7" y="213" width="3.2" height="15.0" fill="rgb(221,122,30)" rx="2" ry="2" />
<text  x="1038.73" y="223.5" ></text>
</g>
<g >
<title>Thread::call_run() (2 samples, 0.08%)</title><rect x="1173.0" y="293" width="0.9" height="15.0" fill="rgb(248,179,2)" rx="2" ry="2" />
<text  x="1176.01" y="303.5" ></text>
</g>
<g >
<title>__softirqentry_text_start      (1 samples, 0.04%)</title><rect x="136.3" y="149" width="0.4" height="15.0" fill="rgb(214,102,4)" rx="2" ry="2" />
<text  x="139.26" y="159.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (3 samples, 0.12%)</title><rect x="22.9" y="309" width="1.3" height="15.0" fill="rgb(215,154,11)" rx="2" ry="2" />
<text  x="25.86" y="319.5" ></text>
</g>
<g >
<title>run_timer_softirq (1 samples, 0.04%)</title><rect x="239.6" y="165" width="0.4" height="15.0" fill="rgb(222,119,51)" rx="2" ry="2" />
<text  x="242.57" y="175.5" ></text>
</g>
<g >
<title>void OopOopIterateDispatch&lt;PCAdjustPointerClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(PCAdjustPointerClosure*, oopDesc*, Klass*)      (3 samples, 0.12%)</title><rect x="240.0" y="229" width="1.4" height="15.0" fill="rgb(229,142,22)" rx="2" ry="2" />
<text  x="243.03" y="239.5" ></text>
</g>
<g >
<title>UpdateOnlyClosure::do_addr(HeapWordImpl**, unsigned long)      (103 samples, 4.01%)</title><rect x="241.4" y="245" width="47.3" height="15.0" fill="rgb(209,57,37)" rx="2" ry="2" />
<text  x="244.41" y="255.5" >Upda..</text>
</g>
<g >
<title>ParCompactionManager::follow_contents(oopDesc*) (5 samples, 0.19%)</title><rect x="51.3" y="229" width="2.3" height="15.0" fill="rgb(223,200,43)" rx="2" ry="2" />
<text  x="54.32" y="239.5" ></text>
</g>
<g >
<title>SystemDictionary::oops_do(OopClosure*) (2 samples, 0.08%)</title><rect x="53.6" y="245" width="0.9" height="15.0" fill="rgb(246,197,51)" rx="2" ry="2" />
<text  x="56.62" y="255.5" ></text>
</g>
<g >
<title>PSParallelCompact::fill_blocks(unsigned long)      (4 samples, 0.16%)</title><rect x="297.4" y="213" width="1.9" height="15.0" fill="rgb(235,100,11)" rx="2" ry="2" />
<text  x="300.42" y="223.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.04%)</title><rect x="239.6" y="181" width="0.4" height="15.0" fill="rgb(249,96,48)" rx="2" ry="2" />
<text  x="242.57" y="191.5" ></text>
</g>
<g >
<title>      (26 samples, 1.01%)</title><rect x="10.9" y="325" width="12.0" height="15.0" fill="rgb(250,0,36)" rx="2" ry="2" />
<text  x="13.92" y="335.5" ></text>
</g>
<g >
<title>jni_CallStaticVoidMethod (28 samples, 1.09%)</title><rect x="1177.1" y="277" width="12.9" height="15.0" fill="rgb(213,49,50)" rx="2" ry="2" />
<text  x="1180.14" y="287.5" ></text>
</g>
<g >
<title>get_futex_key_refs.isra.13      (1 samples, 0.04%)</title><rect x="22.9" y="229" width="0.4" height="15.0" fill="rgb(234,149,1)" rx="2" ry="2" />
<text  x="25.86" y="239.5" ></text>
</g>
<g >
<title>jni_invoke_static(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .isra.83] [clone .constprop.254] (28 samples, 1.09%)</title><rect x="1177.1" y="261" width="12.9" height="15.0" fill="rgb(225,68,1)" rx="2" ry="2" />
<text  x="1180.14" y="271.5" ></text>
</g>
<g >
<title>vgdrvHeartbeatTimerHandler (1 samples, 0.04%)</title><rect x="239.6" y="117" width="0.4" height="15.0" fill="rgb(249,197,15)" rx="2" ry="2" />
<text  x="242.57" y="127.5" ></text>
</g>
<g >
<title>ParallelCompactData::calc_new_pointer(HeapWordImpl**, ParCompactionManager*)      (4 samples, 0.16%)</title><rect x="235.0" y="197" width="1.8" height="15.0" fill="rgb(209,142,34)" rx="2" ry="2" />
<text  x="237.98" y="207.5" ></text>
</g>
<g >
<title>VbglR0GRPerform      (1 samples, 0.04%)</title><rect x="805.7" y="69" width="0.5" height="15.0" fill="rgb(225,192,19)" rx="2" ry="2" />
<text  x="808.70" y="79.5" ></text>
</g>
<g >
<title>ClassLoaderData::oops_do(OopClosure*, int, bool)      (23 samples, 0.89%)</title><rect x="558.2" y="213" width="10.6" height="15.0" fill="rgb(233,79,47)" rx="2" ry="2" />
<text  x="561.22" y="223.5" ></text>
</g>
<g >
<title>UpdateOnlyClosure::do_addr(HeapWordImpl**, unsigned long)      (21 samples, 0.82%)</title><rect x="117.0" y="229" width="9.6" height="15.0" fill="rgb(245,110,35)" rx="2" ry="2" />
<text  x="119.98" y="239.5" ></text>
</g>
<g >
<title>ParallelCompactData::calc_new_pointer(HeapWordImpl**, ParCompactionManager*) (1 samples, 0.04%)</title><rect x="136.3" y="213" width="0.4" height="15.0" fill="rgb(253,62,27)" rx="2" ry="2" />
<text  x="139.26" y="223.5" ></text>
</g>
<g >
<title>clear_page_rep      (3 samples, 0.12%)</title><rect x="48.6" y="69" width="1.3" height="15.0" fill="rgb(205,182,37)" rx="2" ry="2" />
<text  x="51.57" y="79.5" ></text>
</g>
<g >
<title>VM Thread (7 samples, 0.27%)</title><rect x="1173.9" y="341" width="3.2" height="15.0" fill="rgb(217,80,53)" rx="2" ry="2" />
<text  x="1176.93" y="351.5" ></text>
</g>
<g >
<title>CollectedHeap::fill_with_dummy_object(HeapWordImpl**, HeapWordImpl**, bool) (1 samples, 0.04%)</title><rect x="1189.5" y="53" width="0.5" height="15.0" fill="rgb(242,228,18)" rx="2" ry="2" />
<text  x="1192.54" y="63.5" ></text>
</g>
<g >
<title>__do_page_fault (1 samples, 0.04%)</title><rect x="1139.0" y="197" width="0.5" height="15.0" fill="rgb(208,69,5)" rx="2" ry="2" />
<text  x="1142.04" y="207.5" ></text>
</g>
<g >
<title>ParMarkBitMap::iterate(ParMarkBitMapClosure*, unsigned long, unsigned long) const      (10 samples, 0.39%)</title><rect x="24.2" y="213" width="4.6" height="15.0" fill="rgb(229,104,37)" rx="2" ry="2" />
<text  x="27.23" y="223.5" ></text>
</g>
<g >
<title>Thread::call_run() (7 samples, 0.27%)</title><rect x="1173.9" y="293" width="3.2" height="15.0" fill="rgb(239,82,48)" rx="2" ry="2" />
<text  x="1176.93" y="303.5" ></text>
</g>
<g >
<title>rcu_report_qs_rnp (1 samples, 0.04%)</title><rect x="1048.6" y="133" width="0.4" height="15.0" fill="rgb(211,112,33)" rx="2" ry="2" />
<text  x="1051.58" y="143.5" ></text>
</g>
<g >
<title>rcu_process_callbacks (1 samples, 0.04%)</title><rect x="805.2" y="133" width="0.5" height="15.0" fill="rgb(225,71,17)" rx="2" ry="2" />
<text  x="808.24" y="143.5" ></text>
</g>
<g >
<title>ThreadLocalAllocBuffer::retire_before_allocation() (1 samples, 0.04%)</title><rect x="1189.5" y="69" width="0.5" height="15.0" fill="rgb(217,155,16)" rx="2" ry="2" />
<text  x="1192.54" y="79.5" ></text>
</g>
<g >
<title>void OopOopIterateDispatch&lt;PCIterateMarkAndPushClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(PCIterateMarkAndPushClosure*, oopDesc*, Klass*) (1 samples, 0.04%)</title><rect x="1048.6" y="229" width="0.4" height="15.0" fill="rgb(232,67,24)" rx="2" ry="2" />
<text  x="1051.58" y="239.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="288.7" y="213" width="0.5" height="15.0" fill="rgb(209,142,1)" rx="2" ry="2" />
<text  x="291.70" y="223.5" ></text>
</g>
<g >
<title>ParMarkBitMap::mark_obj(HeapWordImpl**, unsigned long)      (189 samples, 7.35%)</title><rect x="1051.3" y="245" width="86.8" height="15.0" fill="rgb(214,92,52)" rx="2" ry="2" />
<text  x="1054.34" y="255.5" >ParMarkBit..</text>
</g>
<g >
<title>ParCompactionManager::follow_marking_stacks() (5 samples, 0.19%)</title><rect x="51.3" y="245" width="2.3" height="15.0" fill="rgb(229,8,26)" rx="2" ry="2" />
<text  x="54.32" y="255.5" ></text>
</g>
<g >
<title>do_IRQ (1 samples, 0.04%)</title><rect x="1039.9" y="213" width="0.4" height="15.0" fill="rgb(243,163,20)" rx="2" ry="2" />
<text  x="1042.86" y="223.5" ></text>
</g>
<g >
<title>__schedule      (1 samples, 0.04%)</title><rect x="1040.3" y="165" width="0.5" height="15.0" fill="rgb(219,56,24)" rx="2" ry="2" />
<text  x="1043.32" y="175.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop      (5 samples, 0.19%)</title><rect x="1036.6" y="165" width="2.3" height="15.0" fill="rgb(249,84,35)" rx="2" ry="2" />
<text  x="1039.65" y="175.5" ></text>
</g>
<g >
<title>run_timer_softirq      (1 samples, 0.04%)</title><rect x="894.8" y="133" width="0.4" height="15.0" fill="rgb(241,210,36)" rx="2" ry="2" />
<text  x="897.77" y="143.5" ></text>
</g>
<g >
<title>ParCompactionManager::follow_contents(oopDesc*)      (139 samples, 5.41%)</title><rect x="494.4" y="229" width="63.8" height="15.0" fill="rgb(240,81,51)" rx="2" ry="2" />
<text  x="497.40" y="239.5" >ParComp..</text>
</g>
<g >
<title>Attach Listener (2 samples, 0.08%)</title><rect x="10.0" y="341" width="0.9" height="15.0" fill="rgb(237,212,32)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>VM_ParallelGCFailedAllocation::doit() (7 samples, 0.27%)</title><rect x="1173.9" y="213" width="3.2" height="15.0" fill="rgb(234,59,3)" rx="2" ry="2" />
<text  x="1176.93" y="223.5" ></text>
</g>
<g >
<title>ParMarkBitMap::live_words_in_range_helper(HeapWordImpl**, oopDesc*) const      (4 samples, 0.16%)</title><rect x="41.7" y="133" width="1.8" height="15.0" fill="rgb(248,170,10)" rx="2" ry="2" />
<text  x="44.68" y="143.5" ></text>
</g>
<g >
<title>do_IRQ (1 samples, 0.04%)</title><rect x="10.5" y="245" width="0.4" height="15.0" fill="rgb(246,69,42)" rx="2" ry="2" />
<text  x="13.46" y="255.5" ></text>
</g>
<g >
<title>__handle_mm_fault (3 samples, 0.12%)</title><rect x="48.6" y="117" width="1.3" height="15.0" fill="rgb(222,71,5)" rx="2" ry="2" />
<text  x="51.57" y="127.5" ></text>
</g>
<g >
<title>__softirqentry_text_start      (2 samples, 0.08%)</title><rect x="1038.9" y="181" width="1.0" height="15.0" fill="rgb(245,18,29)" rx="2" ry="2" />
<text  x="1041.94" y="191.5" ></text>
</g>
<g >
<title>WatcherThread::run()      (1 samples, 0.04%)</title><rect x="1173.0" y="277" width="0.5" height="15.0" fill="rgb(240,229,51)" rx="2" ry="2" />
<text  x="1176.01" y="287.5" ></text>
</g>
<g >
<title>Main.count (1 samples, 0.04%)</title><rect x="1189.5" y="181" width="0.5" height="15.0" fill="rgb(232,89,9)" rx="2" ry="2" />
<text  x="1192.54" y="191.5" ></text>
</g>
<g >
<title>sys_futex (3 samples, 0.12%)</title><rect x="22.9" y="277" width="1.3" height="15.0" fill="rgb(242,10,12)" rx="2" ry="2" />
<text  x="25.86" y="287.5" ></text>
</g>
<g >
<title>PSParallelCompact::fill_blocks(unsigned long)      (1 samples, 0.04%)</title><rect x="236.8" y="181" width="0.5" height="15.0" fill="rgb(216,225,49)" rx="2" ry="2" />
<text  x="239.82" y="191.5" ></text>
</g>
<g >
<title>ParallelCompactData::calc_new_pointer(HeapWordImpl**, ParCompactionManager*)      (8 samples, 0.31%)</title><rect x="132.6" y="213" width="3.7" height="15.0" fill="rgb(227,15,29)" rx="2" ry="2" />
<text  x="135.59" y="223.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (10 samples, 0.39%)</title><rect x="801.6" y="197" width="4.6" height="15.0" fill="rgb(240,10,21)" rx="2" ry="2" />
<text  x="804.56" y="207.5" ></text>
</g>
<g >
<title>start_thread (28 samples, 1.09%)</title><rect x="1177.1" y="325" width="12.9" height="15.0" fill="rgb(230,168,41)" rx="2" ry="2" />
<text  x="1180.14" y="335.5" ></text>
</g>
<g >
<title>start_thread (2 samples, 0.08%)</title><rect x="1173.0" y="325" width="0.9" height="15.0" fill="rgb(242,57,46)" rx="2" ry="2" />
<text  x="1176.01" y="335.5" ></text>
</g>
<g >
<title>ThreadRootsMarkingTask::do_it(GCTaskManager*, unsigned int) (1,895 samples, 73.74%)</title><rect x="302.0" y="261" width="870.1" height="15.0" fill="rgb(223,140,36)" rx="2" ry="2" />
<text  x="305.02" y="271.5" >ThreadRootsMarkingTask::do_it(GCTaskManager*, unsigned int)</text>
</g>
<g >
<title>thread_native_entry(Thread*) (7 samples, 0.27%)</title><rect x="1173.9" y="309" width="3.2" height="15.0" fill="rgb(249,196,7)" rx="2" ry="2" />
<text  x="1176.93" y="319.5" ></text>
</g>
<g >
<title>UpdateOnlyClosure::do_addr(HeapWordImpl**, unsigned long) (1 samples, 0.04%)</title><rect x="288.7" y="245" width="0.5" height="15.0" fill="rgb(207,109,25)" rx="2" ry="2" />
<text  x="291.70" y="255.5" ></text>
</g>
<g >
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.04%)</title><rect x="1189.5" y="101" width="0.5" height="15.0" fill="rgb(230,143,42)" rx="2" ry="2" />
<text  x="1192.54" y="111.5" ></text>
</g>
<g >
<title>__softirqentry_text_start      (1 samples, 0.04%)</title><rect x="301.6" y="133" width="0.4" height="15.0" fill="rgb(236,107,49)" rx="2" ry="2" />
<text  x="304.56" y="143.5" ></text>
</g>
<g >
<title>void OopOopIterateDispatch&lt;PCAdjustPointerClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(PCAdjustPointerClosure*, oopDesc*, Klass*) (13 samples, 0.51%)</title><rect x="37.5" y="181" width="6.0" height="15.0" fill="rgb(245,44,9)" rx="2" ry="2" />
<text  x="40.55" y="191.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="301.6" y="165" width="0.4" height="15.0" fill="rgb(214,180,7)" rx="2" ry="2" />
<text  x="304.56" y="175.5" ></text>
</g>
<g >
<title>ParallelCompactData::add_obj(HeapWordImpl**, unsigned long)      (71 samples, 2.76%)</title><rect x="1139.5" y="245" width="32.6" height="15.0" fill="rgb(220,137,15)" rx="2" ry="2" />
<text  x="1142.49" y="255.5" >Pa..</text>
</g>
<g >
<title>JavaMain (28 samples, 1.09%)</title><rect x="1177.1" y="293" width="12.9" height="15.0" fill="rgb(216,134,1)" rx="2" ry="2" />
<text  x="1180.14" y="303.5" ></text>
</g>
<g >
<title>alloc_pages_vma (3 samples, 0.12%)</title><rect x="48.6" y="101" width="1.3" height="15.0" fill="rgb(240,53,32)" rx="2" ry="2" />
<text  x="51.57" y="111.5" ></text>
</g>
<g >
<title>Klass::start_of_vtable() const      (13 samples, 0.51%)</title><rect x="126.6" y="213" width="6.0" height="15.0" fill="rgb(238,38,26)" rx="2" ry="2" />
<text  x="129.62" y="223.5" ></text>
</g>
<g >
<title>void OopOopIterateDispatch&lt;PCIterateMarkAndPushClosure&gt;::Table::oop_oop_iterate&lt;TypeArrayKlass, unsigned int&gt;(PCIterateMarkAndPushClosure*, oopDesc*, Klass*)      (5 samples, 0.19%)</title><rect x="1049.0" y="229" width="2.3" height="15.0" fill="rgb(217,43,4)" rx="2" ry="2" />
<text  x="1052.04" y="239.5" ></text>
</g>
<g >
<title>do_page_fault (6 samples, 0.23%)</title><rect x="47.2" y="165" width="2.7" height="15.0" fill="rgb(247,142,20)" rx="2" ry="2" />
<text  x="50.19" y="175.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (2 samples, 0.08%)</title><rect x="1138.1" y="213" width="0.9" height="15.0" fill="rgb(205,155,8)" rx="2" ry="2" />
<text  x="1141.12" y="223.5" ></text>
</g>
<g >
<title>ObjArrayAllocator::initialize(HeapWordImpl**) const      (1 samples, 0.04%)</title><rect x="1189.5" y="37" width="0.5" height="15.0" fill="rgb(243,197,47)" rx="2" ry="2" />
<text  x="1192.54" y="47.5" ></text>
</g>
<g >
<title>SyS_write      (1 samples, 0.04%)</title><rect x="10.0" y="277" width="0.5" height="15.0" fill="rgb(226,220,13)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>java (28 samples, 1.09%)</title><rect x="1177.1" y="341" width="12.9" height="15.0" fill="rgb(207,125,30)" rx="2" ry="2" />
<text  x="1180.14" y="351.5" ></text>
</g>
<g >
<title>vgdrvHeartbeatTimerHandler (1 samples, 0.04%)</title><rect x="805.7" y="85" width="0.5" height="15.0" fill="rgb(239,78,25)" rx="2" ry="2" />
<text  x="808.70" y="95.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.04%)</title><rect x="1048.6" y="165" width="0.4" height="15.0" fill="rgb(218,170,48)" rx="2" ry="2" />
<text  x="1051.58" y="175.5" ></text>
</g>
<g >
<title>handle_mm_fault (3 samples, 0.12%)</title><rect x="48.6" y="133" width="1.3" height="15.0" fill="rgb(249,116,32)" rx="2" ry="2" />
<text  x="51.57" y="143.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (2 samples, 0.08%)</title><rect x="1035.7" y="181" width="0.9" height="15.0" fill="rgb(241,21,45)" rx="2" ry="2" />
<text  x="1038.73" y="191.5" ></text>
</g>
<g >
<title>__softirqentry_text_start      (1 samples, 0.04%)</title><rect x="234.1" y="149" width="0.4" height="15.0" fill="rgb(216,46,50)" rx="2" ry="2" />
<text  x="237.06" y="159.5" ></text>
</g>
<g >
<title>irq_exit (10 samples, 0.39%)</title><rect x="801.6" y="165" width="4.6" height="15.0" fill="rgb(237,205,20)" rx="2" ry="2" />
<text  x="804.56" y="175.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.04%)</title><rect x="301.6" y="181" width="0.4" height="15.0" fill="rgb(222,130,10)" rx="2" ry="2" />
<text  x="304.56" y="191.5" ></text>
</g>
<g >
<title>ParMarkBitMap::iterate(ParMarkBitMapClosure*, ParMarkBitMapClosure*, unsigned long, unsigned long, unsigned long) const (271 samples, 10.54%)</title><rect x="117.0" y="245" width="124.4" height="15.0" fill="rgb(250,138,46)" rx="2" ry="2" />
<text  x="119.98" y="255.5" >ParMarkBitMap::..</text>
</g>
<g >
<title>ParallelCompactData::calc_new_pointer(HeapWordImpl**, ParCompactionManager*) (6 samples, 0.23%)</title><rect x="236.8" y="197" width="2.8" height="15.0" fill="rgb(206,32,3)" rx="2" ry="2" />
<text  x="239.82" y="207.5" ></text>
</g>
<g >
<title>Main.loop (23 samples, 0.89%)</title><rect x="1179.4" y="197" width="10.6" height="15.0" fill="rgb(237,78,10)" rx="2" ry="2" />
<text  x="1182.44" y="207.5" ></text>
</g>
<g >
<title>WatcherThread::run() (1 samples, 0.04%)</title><rect x="1173.5" y="277" width="0.4" height="15.0" fill="rgb(209,4,10)" rx="2" ry="2" />
<text  x="1176.47" y="287.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (2 samples, 0.08%)</title><rect x="1038.9" y="213" width="1.0" height="15.0" fill="rgb(206,89,36)" rx="2" ry="2" />
<text  x="1041.94" y="223.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.04%)</title><rect x="806.2" y="197" width="0.4" height="15.0" fill="rgb(233,148,39)" rx="2" ry="2" />
<text  x="809.16" y="207.5" ></text>
</g>
<g >
<title>__lll_unlock_wake      (1 samples, 0.04%)</title><rect x="1172.1" y="277" width="0.5" height="15.0" fill="rgb(240,209,9)" rx="2" ry="2" />
<text  x="1175.09" y="287.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.08%)</title><rect x="895.2" y="213" width="0.9" height="15.0" fill="rgb(253,1,3)" rx="2" ry="2" />
<text  x="898.23" y="223.5" ></text>
</g>
<g >
<title>page_fault (6 samples, 0.23%)</title><rect x="47.2" y="181" width="2.7" height="15.0" fill="rgb(243,126,14)" rx="2" ry="2" />
<text  x="50.19" y="191.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (3 samples, 0.12%)</title><rect x="48.6" y="85" width="1.3" height="15.0" fill="rgb(206,57,36)" rx="2" ry="2" />
<text  x="51.57" y="95.5" ></text>
</g>
<g >
<title>irq_exit (1 samples, 0.04%)</title><rect x="234.1" y="165" width="0.4" height="15.0" fill="rgb(241,34,12)" rx="2" ry="2" />
<text  x="237.06" y="175.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (2 samples, 0.08%)</title><rect x="895.2" y="197" width="0.9" height="15.0" fill="rgb(218,41,14)" rx="2" ry="2" />
<text  x="898.23" y="207.5" ></text>
</g>
<g >
<title>void OopOopIterateDispatch&lt;PCIterateMarkAndPushClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(PCIterateMarkAndPushClosure*, oopDesc*, Klass*)      (17 samples, 0.66%)</title><rect x="1040.8" y="229" width="7.8" height="15.0" fill="rgb(216,46,42)" rx="2" ry="2" />
<text  x="1043.78" y="239.5" ></text>
</g>
<g >
<title>thread_native_entry(Thread*) (2,502 samples, 97.35%)</title><rect x="24.2" y="309" width="1148.8" height="15.0" fill="rgb(251,226,29)" rx="2" ry="2" />
<text  x="27.23" y="319.5" >thread_native_entry(Thread*)</text>
</g>
<g >
<title>__softirqentry_text_start      (1 samples, 0.04%)</title><rect x="239.1" y="133" width="0.5" height="15.0" fill="rgb(205,219,3)" rx="2" ry="2" />
<text  x="242.11" y="143.5" ></text>
</g>
<g >
<title>nmethod::do_unloading(bool) (2 samples, 0.08%)</title><rect x="1173.9" y="133" width="0.9" height="15.0" fill="rgb(254,47,40)" rx="2" ry="2" />
<text  x="1176.93" y="143.5" ></text>
</g>
<g >
<title>ParMarkBitMap::live_words_in_range(ParCompactionManager*, HeapWordImpl**, oopDesc*) const (4 samples, 0.16%)</title><rect x="41.7" y="149" width="1.8" height="15.0" fill="rgb(216,65,37)" rx="2" ry="2" />
<text  x="44.68" y="159.5" ></text>
</g>
<g >
<title>ParMarkBitMap::live_words_in_range(ParCompactionManager*, HeapWordImpl**, oopDesc*) const      (2 samples, 0.08%)</title><rect x="40.8" y="149" width="0.9" height="15.0" fill="rgb(246,99,34)" rx="2" ry="2" />
<text  x="43.76" y="159.5" ></text>
</g>
<g >
<title>Main.count      (22 samples, 0.86%)</title><rect x="1179.4" y="181" width="10.1" height="15.0" fill="rgb(227,110,19)" rx="2" ry="2" />
<text  x="1182.44" y="191.5" ></text>
</g>
<g >
<title>void OopOopIterateDispatch&lt;PCAdjustPointerClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(PCAdjustPointerClosure*, oopDesc*, Klass*) (86 samples, 3.35%)</title><rect x="195.0" y="213" width="39.5" height="15.0" fill="rgb(230,185,7)" rx="2" ry="2" />
<text  x="198.04" y="223.5" >voi..</text>
</g>
<g >
<title>ParallelCompactData::add_obj(HeapWordImpl**, unsigned long) (3 samples, 0.12%)</title><rect x="893.9" y="213" width="1.3" height="15.0" fill="rgb(236,74,44)" rx="2" ry="2" />
<text  x="896.85" y="223.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="234.1" y="181" width="0.4" height="15.0" fill="rgb(219,165,20)" rx="2" ry="2" />
<text  x="237.06" y="191.5" ></text>
</g>
<g >
<title>CompactionWithStealingTask::do_it(GCTaskManager*, unsigned int) (59 samples, 2.30%)</title><rect x="24.2" y="261" width="27.1" height="15.0" fill="rgb(226,88,22)" rx="2" ry="2" />
<text  x="27.23" y="271.5" >C..</text>
</g>
<g >
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.04%)</title><rect x="1189.5" y="85" width="0.5" height="15.0" fill="rgb(243,73,15)" rx="2" ry="2" />
<text  x="1192.54" y="95.5" ></text>
</g>
<g >
<title>UpdateOnlyClosure::do_addr(HeapWordImpl**, unsigned long) (246 samples, 9.57%)</title><rect x="126.6" y="229" width="113.0" height="15.0" fill="rgb(242,191,0)" rx="2" ry="2" />
<text  x="129.62" y="239.5" >UpdateOnlyClo..</text>
</g>
<g >
<title>[UNKNOWN]      (5 samples, 0.19%)</title><rect x="1174.8" y="117" width="2.3" height="15.0" fill="rgb(224,198,4)" rx="2" ry="2" />
<text  x="1177.85" y="127.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (2 samples, 0.08%)</title><rect x="1035.7" y="197" width="0.9" height="15.0" fill="rgb(245,134,52)" rx="2" ry="2" />
<text  x="1038.73" y="207.5" ></text>
</g>
<g >
<title>ParCompactionManager::follow_contents(oopDesc*) (1,047 samples, 40.74%)</title><rect x="558.2" y="229" width="480.7" height="15.0" fill="rgb(221,173,21)" rx="2" ry="2" />
<text  x="561.22" y="239.5" >ParCompactionManager::follow_contents(oopDesc*)</text>
</g>
<g >
<title>void OopOopIterateDispatch&lt;PCAdjustPointerClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(PCAdjustPointerClosure*, oopDesc*, Klass*)      (3 samples, 0.12%)</title><rect x="49.9" y="197" width="1.4" height="15.0" fill="rgb(232,127,45)" rx="2" ry="2" />
<text  x="52.95" y="207.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore      (2 samples, 0.08%)</title><rect x="23.3" y="197" width="0.9" height="15.0" fill="rgb(248,69,15)" rx="2" ry="2" />
<text  x="26.32" y="207.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.08%)</title><rect x="10.0" y="293" width="0.9" height="15.0" fill="rgb(224,226,30)" rx="2" ry="2" />
<text  x="13.00" y="303.5" ></text>
</g>
<g >
<title>CompiledMethod::cleanup_inline_caches_impl(bool, bool)      (2 samples, 0.08%)</title><rect x="1173.9" y="101" width="0.9" height="15.0" fill="rgb(253,110,9)" rx="2" ry="2" />
<text  x="1176.93" y="111.5" ></text>
</g>
<g >
<title>swake_up (1 samples, 0.04%)</title><rect x="1048.6" y="101" width="0.4" height="15.0" fill="rgb(215,87,1)" rx="2" ry="2" />
<text  x="1051.58" y="111.5" ></text>
</g>
<g >
<title>ParCompactionManager::follow_marking_stacks()      (401 samples, 15.60%)</title><rect x="310.3" y="245" width="184.1" height="15.0" fill="rgb(214,14,4)" rx="2" ry="2" />
<text  x="313.28" y="255.5" >ParCompactionManager::fo..</text>
</g>
<g >
<title>do_page_fault (1 samples, 0.04%)</title><rect x="1139.0" y="213" width="0.5" height="15.0" fill="rgb(242,168,52)" rx="2" ry="2" />
<text  x="1142.04" y="223.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (10 samples, 0.39%)</title><rect x="801.6" y="181" width="4.6" height="15.0" fill="rgb(226,74,42)" rx="2" ry="2" />
<text  x="804.56" y="191.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="136.3" y="181" width="0.4" height="15.0" fill="rgb(239,165,51)" rx="2" ry="2" />
<text  x="139.26" y="191.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.04%)</title><rect x="288.7" y="229" width="0.5" height="15.0" fill="rgb(217,196,6)" rx="2" ry="2" />
<text  x="291.70" y="239.5" ></text>
</g>
<g >
<title>ClassLoaderData::oops_do(OopClosure*, int, bool)      (2 samples, 0.08%)</title><rect x="51.3" y="213" width="0.9" height="15.0" fill="rgb(220,164,23)" rx="2" ry="2" />
<text  x="54.32" y="223.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (2 samples, 0.08%)</title><rect x="1038.9" y="229" width="1.0" height="15.0" fill="rgb(251,59,14)" rx="2" ry="2" />
<text  x="1041.94" y="239.5" ></text>
</g>
<g >
<title>rcu_gp_kthread_wake (1 samples, 0.04%)</title><rect x="805.2" y="101" width="0.5" height="15.0" fill="rgb(206,203,46)" rx="2" ry="2" />
<text  x="808.24" y="111.5" ></text>
</g>
<g >
<title>finish_task_switch      (2 samples, 0.08%)</title><rect x="895.2" y="133" width="0.9" height="15.0" fill="rgb(211,169,14)" rx="2" ry="2" />
<text  x="898.23" y="143.5" ></text>
</g>
<g >
<title>ParallelCompactData::calc_new_pointer(HeapWordImpl**, ParCompactionManager*)      (6 samples, 0.23%)</title><rect x="294.7" y="229" width="2.7" height="15.0" fill="rgb(212,67,41)" rx="2" ry="2" />
<text  x="297.67" y="239.5" ></text>
</g>
<g >
<title>schedule (1 samples, 0.04%)</title><rect x="1040.3" y="181" width="0.5" height="15.0" fill="rgb(254,82,14)" rx="2" ry="2" />
<text  x="1043.32" y="191.5" ></text>
</g>
<g >
<title>irq_exit (2 samples, 0.08%)</title><rect x="1038.9" y="197" width="1.0" height="15.0" fill="rgb(221,37,35)" rx="2" ry="2" />
<text  x="1041.94" y="207.5" ></text>
</g>
<g >
<title>ParGC Thread#0 (2,531 samples, 98.48%)</title><rect x="10.9" y="341" width="1162.1" height="15.0" fill="rgb(221,212,40)" rx="2" ry="2" />
<text  x="13.92" y="351.5" >ParGC Thread#0</text>
</g>
<g >
<title>[UNKNOWN]      (8 samples, 0.31%)</title><rect x="43.5" y="197" width="3.7" height="15.0" fill="rgb(210,21,34)" rx="2" ry="2" />
<text  x="46.52" y="207.5" ></text>
</g>
<g >
<title>ParMarkBitMap::live_words_in_range(ParCompactionManager*, HeapWordImpl**, oopDesc*) const (4 samples, 0.16%)</title><rect x="237.3" y="181" width="1.8" height="15.0" fill="rgb(205,107,4)" rx="2" ry="2" />
<text  x="240.28" y="191.5" ></text>
</g>
<g >
<title>SyS_write (1 samples, 0.04%)</title><rect x="10.5" y="277" width="0.4" height="15.0" fill="rgb(248,219,38)" rx="2" ry="2" />
<text  x="13.46" y="287.5" ></text>
</g>
<g >
<title>void OopOopIterateDispatch&lt;PCIterateMarkAndPushClosure&gt;::Table::oop_oop_iterate&lt;InstanceMirrorKlass, unsigned int&gt;(PCIterateMarkAndPushClosure*, oopDesc*, Klass*)      (3 samples, 0.12%)</title><rect x="52.2" y="213" width="1.4" height="15.0" fill="rgb(236,190,31)" rx="2" ry="2" />
<text  x="55.24" y="223.5" ></text>
</g>
<g >
<title>void OopOopIterateDispatch&lt;PCAdjustPointerClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(PCAdjustPointerClosure*, oopDesc*, Klass*)      (127 samples, 4.94%)</title><rect x="136.7" y="213" width="58.3" height="15.0" fill="rgb(207,88,14)" rx="2" ry="2" />
<text  x="139.72" y="223.5" >void O..</text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.04%)</title><rect x="1048.6" y="213" width="0.4" height="15.0" fill="rgb(251,82,50)" rx="2" ry="2" />
<text  x="1051.58" y="223.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (2 samples, 0.08%)</title><rect x="805.2" y="149" width="1.0" height="15.0" fill="rgb(212,210,24)" rx="2" ry="2" />
<text  x="808.24" y="159.5" ></text>
</g>
<g >
<title>Klass::start_of_vtable() const      (6 samples, 0.23%)</title><rect x="568.8" y="213" width="2.7" height="15.0" fill="rgb(229,139,6)" rx="2" ry="2" />
<text  x="571.78" y="223.5" ></text>
</g>
<g >
<title>MarkFromRootsTask::do_it(GCTaskManager*, unsigned int) (7 samples, 0.27%)</title><rect x="51.3" y="261" width="3.2" height="15.0" fill="rgb(220,58,54)" rx="2" ry="2" />
<text  x="54.32" y="271.5" ></text>
</g>
<g >
<title>irq_exit (2 samples, 0.08%)</title><rect x="1138.1" y="197" width="0.9" height="15.0" fill="rgb(223,0,35)" rx="2" ry="2" />
<text  x="1141.12" y="207.5" ></text>
</g>
<g >
<title>ParMarkBitMap::mark_obj(HeapWordImpl**, unsigned long)      (501 samples, 19.49%)</title><rect x="571.5" y="213" width="230.1" height="15.0" fill="rgb(222,210,7)" rx="2" ry="2" />
<text  x="574.53" y="223.5" >ParMarkBitMap::mark_obj(HeapWo..</text>
</g>
<g >
<title>__softirqentry_text_start      (2 samples, 0.08%)</title><rect x="893.9" y="149" width="0.9" height="15.0" fill="rgb(212,115,32)" rx="2" ry="2" />
<text  x="896.85" y="159.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="239.1" y="165" width="0.5" height="15.0" fill="rgb(254,149,4)" rx="2" ry="2" />
<text  x="242.11" y="175.5" ></text>
</g>
<g >
<title>ParallelCompactData::calc_new_pointer(HeapWordImpl**, ParCompactionManager*) (10 samples, 0.39%)</title><rect x="297.4" y="229" width="4.6" height="15.0" fill="rgb(252,7,20)" rx="2" ry="2" />
<text  x="300.42" y="239.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.04%)</title><rect x="806.2" y="181" width="0.4" height="15.0" fill="rgb(242,33,19)" rx="2" ry="2" />
<text  x="809.16" y="191.5" ></text>
</g>
<g >
<title>irq_exit (1 samples, 0.04%)</title><rect x="1048.6" y="181" width="0.4" height="15.0" fill="rgb(231,1,42)" rx="2" ry="2" />
<text  x="1051.58" y="191.5" ></text>
</g>
<g >
<title>ThreadJavaMain (28 samples, 1.09%)</title><rect x="1177.1" y="309" width="12.9" height="15.0" fill="rgb(219,120,13)" rx="2" ry="2" />
<text  x="1180.14" y="319.5" ></text>
</g>
<g >
<title>rtTimerLinuxStdCallback (1 samples, 0.04%)</title><rect x="805.7" y="101" width="0.5" height="15.0" fill="rgb(251,165,10)" rx="2" ry="2" />
<text  x="808.70" y="111.5" ></text>
</g>
<g >
<title>ParMarkBitMap::iterate(ParMarkBitMapClosure*, unsigned long, unsigned long) const (49 samples, 1.91%)</title><rect x="28.8" y="213" width="22.5" height="15.0" fill="rgb(240,117,54)" rx="2" ry="2" />
<text  x="31.82" y="223.5" >P..</text>
</g>
<g >
<title>[UNKNOWN] (2 samples, 0.08%)</title><rect x="10.0" y="325" width="0.9" height="15.0" fill="rgb(215,119,32)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (28 samples, 1.09%)</title><rect x="1177.1" y="245" width="12.9" height="15.0" fill="rgb(251,63,12)" rx="2" ry="2" />
<text  x="1180.14" y="255.5" ></text>
</g>
<g >
<title>ParallelScavengeHeap::failed_mem_allocate(unsigned long) (7 samples, 0.27%)</title><rect x="1173.9" y="197" width="3.2" height="15.0" fill="rgb(251,108,26)" rx="2" ry="2" />
<text  x="1176.93" y="207.5" ></text>
</g>
<g >
<title>MoveAndUpdateClosure::do_addr(HeapWordImpl**, unsigned long) (20 samples, 0.78%)</title><rect x="34.3" y="197" width="9.2" height="15.0" fill="rgb(229,153,29)" rx="2" ry="2" />
<text  x="37.33" y="207.5" ></text>
</g>
<g >
<title>page_fault (1 samples, 0.04%)</title><rect x="1139.0" y="229" width="0.5" height="15.0" fill="rgb(214,68,25)" rx="2" ry="2" />
<text  x="1142.04" y="239.5" ></text>
</g>
<g >
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.04%)</title><rect x="1189.5" y="133" width="0.5" height="15.0" fill="rgb(225,64,17)" rx="2" ry="2" />
<text  x="1192.54" y="143.5" ></text>
</g>
<g >
<title>ParCompactionManager::drain_region_stacks() (59 samples, 2.30%)</title><rect x="24.2" y="245" width="27.1" height="15.0" fill="rgb(207,217,34)" rx="2" ry="2" />
<text  x="27.23" y="255.5" >P..</text>
</g>
<g >
<title>VM Periodic Tas (2 samples, 0.08%)</title><rect x="1173.0" y="341" width="0.9" height="15.0" fill="rgb(218,216,15)" rx="2" ry="2" />
<text  x="1176.01" y="351.5" ></text>
</g>
<g >
<title>ParCompactionManager::follow_marking_stacks() (1,213 samples, 47.20%)</title><rect x="494.4" y="245" width="556.9" height="15.0" fill="rgb(253,19,7)" rx="2" ry="2" />
<text  x="497.40" y="255.5" >ParCompactionManager::follow_marking_stacks()</text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.04%)</title><rect x="894.8" y="149" width="0.4" height="15.0" fill="rgb(244,224,8)" rx="2" ry="2" />
<text  x="897.77" y="159.5" ></text>
</g>
<g >
<title>irq_exit (1 samples, 0.04%)</title><rect x="288.7" y="197" width="0.5" height="15.0" fill="rgb(216,141,50)" rx="2" ry="2" />
<text  x="291.70" y="207.5" ></text>
</g>
<g >
<title>do_syscall_64 (3 samples, 0.12%)</title><rect x="22.9" y="293" width="1.3" height="15.0" fill="rgb(237,155,20)" rx="2" ry="2" />
<text  x="25.86" y="303.5" ></text>
</g>
<g >
<title>void OopOopIterateDispatch&lt;PCAdjustPointerClosure&gt;::Table::oop_oop_iterate&lt;ObjArrayKlass, unsigned int&gt;(PCAdjustPointerClosure*, oopDesc*, Klass*)      (12 samples, 0.47%)</title><rect x="289.2" y="245" width="5.5" height="15.0" fill="rgb(248,70,41)" rx="2" ry="2" />
<text  x="292.16" y="255.5" ></text>
</g>
<g >
<title>PSParallelCompact::post_compact() (5 samples, 0.19%)</title><rect x="1174.8" y="149" width="2.3" height="15.0" fill="rgb(238,20,44)" rx="2" ry="2" />
<text  x="1177.85" y="159.5" ></text>
</g>
<g >
<title>rtTimerLinuxStdCallback (1 samples, 0.04%)</title><rect x="239.6" y="133" width="0.4" height="15.0" fill="rgb(226,189,33)" rx="2" ry="2" />
<text  x="242.57" y="143.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.04%)</title><rect x="136.3" y="197" width="0.4" height="15.0" fill="rgb(237,150,37)" rx="2" ry="2" />
<text  x="139.26" y="207.5" ></text>
</g>
<g >
<title>ParallelCompactData::calc_new_pointer(HeapWordImpl**, ParCompactionManager*)      (2 samples, 0.08%)</title><rect x="34.3" y="181" width="1.0" height="15.0" fill="rgb(231,179,14)" rx="2" ry="2" />
<text  x="37.33" y="191.5" ></text>
</g>
<g >
<title>ParMarkBitMap::live_words_in_range(ParCompactionManager*, HeapWordImpl**, oopDesc*) const (6 samples, 0.23%)</title><rect x="299.3" y="213" width="2.7" height="15.0" fill="rgb(219,214,2)" rx="2" ry="2" />
<text  x="302.26" y="223.5" ></text>
</g>
<g >
<title>__softirqentry_text_start      (1 samples, 0.04%)</title><rect x="288.7" y="181" width="0.5" height="15.0" fill="rgb(216,219,28)" rx="2" ry="2" />
<text  x="291.70" y="191.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="1048.6" y="197" width="0.4" height="15.0" fill="rgb(213,107,0)" rx="2" ry="2" />
<text  x="1051.58" y="207.5" ></text>
</g>
<g >
<title>start_thread (7 samples, 0.27%)</title><rect x="1173.9" y="325" width="3.2" height="15.0" fill="rgb(207,210,26)" rx="2" ry="2" />
<text  x="1176.93" y="335.5" ></text>
</g>
<g >
<title>do_syscall_64      (1 samples, 0.04%)</title><rect x="1172.6" y="245" width="0.4" height="15.0" fill="rgb(242,214,16)" rx="2" ry="2" />
<text  x="1175.55" y="255.5" ></text>
</g>
<g >
<title>irq_exit (1 samples, 0.04%)</title><rect x="239.6" y="197" width="0.4" height="15.0" fill="rgb(233,185,38)" rx="2" ry="2" />
<text  x="242.57" y="207.5" ></text>
</g>
<g >
<title>handle_mm_fault (1 samples, 0.04%)</title><rect x="1139.0" y="181" width="0.5" height="15.0" fill="rgb(242,205,26)" rx="2" ry="2" />
<text  x="1142.04" y="191.5" ></text>
</g>
<g >
<title>wake_up_q (2 samples, 0.08%)</title><rect x="23.3" y="229" width="0.9" height="15.0" fill="rgb(210,163,14)" rx="2" ry="2" />
<text  x="26.32" y="239.5" ></text>
</g>
<g >
<title>try_to_wake_up (2 samples, 0.08%)</title><rect x="23.3" y="213" width="0.9" height="15.0" fill="rgb(209,221,36)" rx="2" ry="2" />
<text  x="26.32" y="223.5" ></text>
</g>
<g >
<title>ParMarkBitMap::live_words_in_range_helper(HeapWordImpl**, oopDesc*) const (1 samples, 0.04%)</title><rect x="301.6" y="197" width="0.4" height="15.0" fill="rgb(222,73,8)" rx="2" ry="2" />
<text  x="304.56" y="207.5" ></text>
</g>
<g >
<title>Thread::call_run() (2,502 samples, 97.35%)</title><rect x="24.2" y="293" width="1148.8" height="15.0" fill="rgb(237,69,47)" rx="2" ry="2" />
<text  x="27.23" y="303.5" >Thread::call_run()</text>
</g>
<g >
<title>GCTaskThread::run() (2,500 samples, 97.28%)</title><rect x="24.2" y="277" width="1147.9" height="15.0" fill="rgb(209,197,53)" rx="2" ry="2" />
<text  x="27.23" y="287.5" >GCTaskThread::run()</text>
</g>
<g >
<title>VM_Operation::evaluate() (7 samples, 0.27%)</title><rect x="1173.9" y="229" width="3.2" height="15.0" fill="rgb(219,38,27)" rx="2" ry="2" />
<text  x="1176.93" y="239.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (5 samples, 0.19%)</title><rect x="1036.6" y="181" width="2.3" height="15.0" fill="rgb(225,141,32)" rx="2" ry="2" />
<text  x="1039.65" y="191.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (3 samples, 0.12%)</title><rect x="893.9" y="197" width="1.3" height="15.0" fill="rgb(248,172,24)" rx="2" ry="2" />
<text  x="896.85" y="207.5" ></text>
</g>
<g >
<title>MemAllocator::allocate() const (1 samples, 0.04%)</title><rect x="1189.5" y="117" width="0.5" height="15.0" fill="rgb(239,152,52)" rx="2" ry="2" />
<text  x="1192.54" y="127.5" ></text>
</g>
<g >
<title>__do_page_fault (3 samples, 0.12%)</title><rect x="48.6" y="149" width="1.3" height="15.0" fill="rgb(228,47,10)" rx="2" ry="2" />
<text  x="51.57" y="159.5" ></text>
</g>
<g >
<title>schedule (2 samples, 0.08%)</title><rect x="895.2" y="165" width="0.9" height="15.0" fill="rgb(207,54,2)" rx="2" ry="2" />
<text  x="898.23" y="175.5" ></text>
</g>
<g >
<title>void OopOopIterateDispatch&lt;PCAdjustPointerClosure&gt;::Table::oop_oop_iterate&lt;ObjArrayKlass, unsigned int&gt;(PCAdjustPointerClosure*, oopDesc*, Klass*)      (1 samples, 0.04%)</title><rect x="234.5" y="213" width="0.5" height="15.0" fill="rgb(206,82,13)" rx="2" ry="2" />
<text  x="237.52" y="223.5" ></text>
</g>
<g >
<title>PeriodicTask::real_time_tick(int)      (1 samples, 0.04%)</title><rect x="1173.5" y="261" width="0.4" height="15.0" fill="rgb(251,24,37)" rx="2" ry="2" />
<text  x="1176.47" y="271.5" ></text>
</g>
<g >
<title>PCMarkAndPushClosure::do_oop(oopDesc**)      (2 samples, 0.08%)</title><rect x="53.6" y="229" width="0.9" height="15.0" fill="rgb(227,73,34)" rx="2" ry="2" />
<text  x="56.62" y="239.5" ></text>
</g>
<g >
<title>irq_exit (1 samples, 0.04%)</title><rect x="10.5" y="229" width="0.4" height="15.0" fill="rgb(253,134,4)" rx="2" ry="2" />
<text  x="13.46" y="239.5" ></text>
</g>
<g >
<title>PSParallelCompact::clear_data_covering_space(PSParallelCompact::SpaceId) (5 samples, 0.19%)</title><rect x="1174.8" y="133" width="2.3" height="15.0" fill="rgb(205,69,25)" rx="2" ry="2" />
<text  x="1177.85" y="143.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.04%)</title><rect x="1040.3" y="197" width="0.5" height="15.0" fill="rgb(233,65,0)" rx="2" ry="2" />
<text  x="1043.32" y="207.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="239.6" y="213" width="0.4" height="15.0" fill="rgb(219,108,33)" rx="2" ry="2" />
<text  x="242.57" y="223.5" ></text>
</g>
<g >
<title>pthread_cond_broadcast@@GLIBC_2.3.2 (3 samples, 0.12%)</title><rect x="22.9" y="325" width="1.3" height="15.0" fill="rgb(210,192,19)" rx="2" ry="2" />
<text  x="25.86" y="335.5" ></text>
</g>
<g >
<title>PSParallelCompact::update_and_deadwood_in_dense_prefix(ParCompactionManager*, PSParallelCompact::SpaceId, unsigned long, unsigned long) (539 samples, 20.97%)</title><rect x="54.5" y="261" width="247.5" height="15.0" fill="rgb(205,105,22)" rx="2" ry="2" />
<text  x="57.54" y="271.5" >PSParallelCompact::update_and_de..</text>
</g>
<g >
<title>ParMarkBitMap::live_words_in_range_helper(HeapWordImpl**, oopDesc*) const      (5 samples, 0.19%)</title><rect x="299.3" y="197" width="2.3" height="15.0" fill="rgb(234,26,40)" rx="2" ry="2" />
<text  x="302.26" y="207.5" ></text>
</g>
<g >
<title>futex_wake (3 samples, 0.12%)</title><rect x="22.9" y="245" width="1.3" height="15.0" fill="rgb(216,116,35)" rx="2" ry="2" />
<text  x="25.86" y="255.5" ></text>
</g>
<g >
<title>PSParallelCompact::invoke_no_policy(bool) [clone .part.176] (7 samples, 0.27%)</title><rect x="1173.9" y="165" width="3.2" height="15.0" fill="rgb(218,161,28)" rx="2" ry="2" />
<text  x="1176.93" y="175.5" ></text>
</g>
<g >
<title>void OopOopIterateDispatch&lt;PCIterateMarkAndPushClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(PCIterateMarkAndPushClosure*, oopDesc*, Klass*)      (304 samples, 11.83%)</title><rect x="896.1" y="213" width="139.6" height="15.0" fill="rgb(206,89,17)" rx="2" ry="2" />
<text  x="899.15" y="223.5" >void OopOopIterat..</text>
</g>
<g >
<title>ret_from_intr (1 samples, 0.04%)</title><rect x="1039.9" y="229" width="0.4" height="15.0" fill="rgb(205,13,43)" rx="2" ry="2" />
<text  x="1042.86" y="239.5" ></text>
</g>
<g >
<title>start_thread (2,502 samples, 97.35%)</title><rect x="24.2" y="325" width="1148.8" height="15.0" fill="rgb(215,53,38)" rx="2" ry="2" />
<text  x="27.23" y="335.5" >start_thread</text>
</g>
<g >
<title>ParMarkBitMap::mark_obj(HeapWordImpl**, unsigned long) (3 samples, 0.12%)</title><rect x="1138.1" y="245" width="1.4" height="15.0" fill="rgb(235,48,29)" rx="2" ry="2" />
<text  x="1141.12" y="255.5" ></text>
</g>
<g >
<title>MoveAndUpdateClosure::do_addr(HeapWordImpl**, unsigned long)      (12 samples, 0.47%)</title><rect x="28.8" y="197" width="5.5" height="15.0" fill="rgb(242,10,53)" rx="2" ry="2" />
<text  x="31.82" y="207.5" ></text>
</g>
<g >
<title>rcu_report_qs_rnp (1 samples, 0.04%)</title><rect x="805.2" y="117" width="0.5" height="15.0" fill="rgb(218,161,50)" rx="2" ry="2" />
<text  x="808.24" y="127.5" ></text>
</g>
<g >
<title>irq_exit (1 samples, 0.04%)</title><rect x="1039.9" y="197" width="0.4" height="15.0" fill="rgb(208,41,16)" rx="2" ry="2" />
<text  x="1042.86" y="207.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (5 samples, 0.19%)</title><rect x="1036.6" y="197" width="2.3" height="15.0" fill="rgb(228,151,43)" rx="2" ry="2" />
<text  x="1039.65" y="207.5" ></text>
</g>
<g >
<title>PSScavenge::invoke() (7 samples, 0.27%)</title><rect x="1173.9" y="181" width="3.2" height="15.0" fill="rgb(218,113,28)" rx="2" ry="2" />
<text  x="1176.93" y="191.5" ></text>
</g>
<g >
<title>ParCompactionManager::follow_contents(oopDesc*)      (18 samples, 0.70%)</title><rect x="302.0" y="245" width="8.3" height="15.0" fill="rgb(246,224,46)" rx="2" ry="2" />
<text  x="305.02" y="255.5" ></text>
</g>
<g >
<title>thread_native_entry(Thread*) (2 samples, 0.08%)</title><rect x="1173.0" y="309" width="0.9" height="15.0" fill="rgb(205,156,11)" rx="2" ry="2" />
<text  x="1176.01" y="319.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (2 samples, 0.08%)</title><rect x="1138.1" y="229" width="0.9" height="15.0" fill="rgb(224,23,42)" rx="2" ry="2" />
<text  x="1141.12" y="239.5" ></text>
</g>
<g >
<title>ret_from_intr (1 samples, 0.04%)</title><rect x="10.5" y="261" width="0.4" height="15.0" fill="rgb(208,217,10)" rx="2" ry="2" />
<text  x="13.46" y="271.5" ></text>
</g>
<g >
<title>ParMarkBitMap::live_words_in_range_helper(HeapWordImpl**, oopDesc*) const      (4 samples, 0.16%)</title><rect x="237.3" y="165" width="1.8" height="15.0" fill="rgb(223,131,40)" rx="2" ry="2" />
<text  x="240.28" y="175.5" ></text>
</g>
<g >
<title>irq_exit (1 samples, 0.04%)</title><rect x="136.3" y="165" width="0.4" height="15.0" fill="rgb(219,105,12)" rx="2" ry="2" />
<text  x="139.26" y="175.5" ></text>
</g>
<g >
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.04%)</title><rect x="1189.5" y="149" width="0.5" height="15.0" fill="rgb(227,53,31)" rx="2" ry="2" />
<text  x="1192.54" y="159.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop      (1 samples, 0.04%)</title><rect x="806.2" y="165" width="0.4" height="15.0" fill="rgb(209,123,53)" rx="2" ry="2" />
<text  x="809.16" y="175.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.04%)</title><rect x="1040.3" y="229" width="0.5" height="15.0" fill="rgb(250,102,34)" rx="2" ry="2" />
<text  x="1043.32" y="239.5" ></text>
</g>
<g >
<title>CodeCache::do_unloading(BoolObjectClosure*, bool) (2 samples, 0.08%)</title><rect x="1173.9" y="149" width="0.9" height="15.0" fill="rgb(253,194,29)" rx="2" ry="2" />
<text  x="1176.93" y="159.5" ></text>
</g>
</g>
</svg>
