<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="598" onload="init(evt)" viewBox="0 0 1200 598" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="598.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="581" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="581" > </text>
<g id="frames">
<g >
<title>PSScavenge::invoke_no_policy() (8 samples, 0.26%)</title><rect x="27.8" y="357" width="3.1" height="15.0" fill="rgb(243,35,26)" rx="2" ry="2" />
<text  x="30.81" y="367.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="19.3" y="485" width="0.4" height="15.0" fill="rgb(211,180,19)" rx="2" ry="2" />
<text  x="22.29" y="495.5" ></text>
</g>
<g >
<title>Thread::call_run() (2 samples, 0.07%)</title><rect x="10.8" y="485" width="0.7" height="15.0" fill="rgb(215,160,39)" rx="2" ry="2" />
<text  x="13.77" y="495.5" ></text>
</g>
<g >
<title>irq_exit (1 samples, 0.03%)</title><rect x="211.4" y="341" width="0.4" height="15.0" fill="rgb(254,68,12)" rx="2" ry="2" />
<text  x="214.38" y="351.5" ></text>
</g>
<g >
<title>pthread_cond_broadcast@@GLIBC_2.3.2 (1 samples, 0.03%)</title><rect x="19.3" y="517" width="0.4" height="15.0" fill="rgb(250,205,1)" rx="2" ry="2" />
<text  x="22.29" y="527.5" ></text>
</g>
<g >
<title>ReferenceProcessor::enable_discovery(bool)      (1 samples, 0.03%)</title><rect x="30.9" y="357" width="0.4" height="15.0" fill="rgb(241,195,0)" rx="2" ry="2" />
<text  x="33.91" y="367.5" ></text>
</g>
<g >
<title>Main.count      (1,146 samples, 37.61%)</title><rect x="267.9" y="389" width="443.8" height="15.0" fill="rgb(243,158,41)" rx="2" ry="2" />
<text  x="270.92" y="399.5" >Main.count     </text>
</g>
<g >
<title>ObjectSynchronizer::deflate_thread_local_monitors(Thread*, DeflateMonitorCounters*)      (1 samples, 0.03%)</title><rect x="22.4" y="373" width="0.4" height="15.0" fill="rgb(207,40,37)" rx="2" ry="2" />
<text  x="25.39" y="383.5" ></text>
</g>
<g >
<title>WeakProcessor::weak_oops_do(BoolObjectClosure*, OopClosure*)      (3 samples, 0.10%)</title><rect x="29.8" y="341" width="1.1" height="15.0" fill="rgb(248,212,9)" rx="2" ry="2" />
<text  x="32.75" y="351.5" ></text>
</g>
<g >
<title>SystemDictionary::vm_weak_oop_storage()      (1 samples, 0.03%)</title><rect x="29.4" y="341" width="0.4" height="15.0" fill="rgb(227,208,25)" rx="2" ry="2" />
<text  x="32.36" y="351.5" ></text>
</g>
<g >
<title>java.util.HashMap.resize      (2 samples, 0.07%)</title><rect x="210.6" y="373" width="0.8" height="15.0" fill="rgb(245,70,45)" rx="2" ry="2" />
<text  x="213.60" y="383.5" ></text>
</g>
<g >
<title>PSPromotionManager::drain_stacks_depth(bool)      (2 samples, 0.07%)</title><rect x="13.5" y="437" width="0.8" height="15.0" fill="rgb(206,194,17)" rx="2" ry="2" />
<text  x="16.49" y="447.5" ></text>
</g>
<g >
<title>thread_native_entry(Thread*) (16 samples, 0.53%)</title><rect x="11.5" y="501" width="6.2" height="15.0" fill="rgb(253,200,29)" rx="2" ry="2" />
<text  x="14.55" y="511.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore      (2 samples, 0.07%)</title><rect x="58.4" y="389" width="0.8" height="15.0" fill="rgb(217,184,38)" rx="2" ry="2" />
<text  x="61.41" y="399.5" ></text>
</g>
<g >
<title>wake_up_q (2 samples, 0.07%)</title><rect x="58.4" y="421" width="0.8" height="15.0" fill="rgb(212,209,52)" rx="2" ry="2" />
<text  x="61.41" y="431.5" ></text>
</g>
<g >
<title>void OopOopIterateBackwardsDispatch&lt;PSPushContentsClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(PSPushContentsClosure*, oopDesc*, Klass*)      (2 samples, 0.07%)</title><rect x="16.2" y="405" width="0.8" height="15.0" fill="rgb(205,93,23)" rx="2" ry="2" />
<text  x="19.20" y="415.5" ></text>
</g>
<g >
<title>ScavengeRootsTask::do_it(GCTaskManager*, unsigned int) (1 samples, 0.03%)</title><rect x="11.9" y="453" width="0.4" height="15.0" fill="rgb(235,74,26)" rx="2" ry="2" />
<text  x="14.94" y="463.5" ></text>
</g>
<g >
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (2 samples, 0.07%)</title><rect x="10.0" y="133" width="0.8" height="15.0" fill="rgb(223,26,16)" rx="2" ry="2" />
<text  x="13.00" y="143.5" ></text>
</g>
<g >
<title>LoadNode::is_instance_field_load_with_local_phi(Node*) (2 samples, 0.07%)</title><rect x="10.8" y="325" width="0.7" height="15.0" fill="rgb(235,113,37)" rx="2" ry="2" />
<text  x="13.77" y="335.5" ></text>
</g>
<g >
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (2 samples, 0.07%)</title><rect x="10.0" y="309" width="0.8" height="15.0" fill="rgb(245,68,36)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>VM_Operation::evaluate() (22 samples, 0.72%)</title><rect x="24.3" y="421" width="8.5" height="15.0" fill="rgb(243,24,25)" rx="2" ry="2" />
<text  x="27.33" y="431.5" ></text>
</g>
<g >
<title>VM_HandshakeAllThreads::doit() (4 samples, 0.13%)</title><rect x="26.3" y="405" width="1.5" height="15.0" fill="rgb(245,111,8)" rx="2" ry="2" />
<text  x="29.27" y="415.5" ></text>
</g>
<g >
<title>StatSamplerTask::task()      (1 samples, 0.03%)</title><rect x="18.1" y="453" width="0.4" height="15.0" fill="rgb(217,66,51)" rx="2" ry="2" />
<text  x="21.13" y="463.5" ></text>
</g>
<g >
<title>InstanceKlass::allocate_instance(Thread*) (7 samples, 0.23%)</title><rect x="714.0" y="341" width="2.8" height="15.0" fill="rgb(219,7,10)" rx="2" ry="2" />
<text  x="717.05" y="351.5" ></text>
</g>
<g >
<title>CompileBroker::compiler_thread_loop() (2 samples, 0.07%)</title><rect x="10.0" y="453" width="0.8" height="15.0" fill="rgb(252,86,14)" rx="2" ry="2" />
<text  x="13.00" y="463.5" ></text>
</g>
<g >
<title>rcu_process_callbacks (1 samples, 0.03%)</title><rect x="1189.2" y="309" width="0.4" height="15.0" fill="rgb(234,26,29)" rx="2" ry="2" />
<text  x="1192.23" y="319.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.03%)</title><rect x="184.3" y="357" width="0.4" height="15.0" fill="rgb(228,83,7)" rx="2" ry="2" />
<text  x="187.27" y="367.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.07%)</title><rect x="58.4" y="501" width="0.8" height="15.0" fill="rgb(207,75,31)" rx="2" ry="2" />
<text  x="61.41" y="511.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="184.3" y="341" width="0.4" height="15.0" fill="rgb(230,0,48)" rx="2" ry="2" />
<text  x="187.27" y="351.5" ></text>
</g>
<g >
<title>outputStream::print(char const*, ...) (1 samples, 0.03%)</title><rect x="27.8" y="277" width="0.4" height="15.0" fill="rgb(251,220,4)" rx="2" ry="2" />
<text  x="30.81" y="287.5" ></text>
</g>
<g >
<title>irq_exit (1 samples, 0.03%)</title><rect x="1189.2" y="341" width="0.4" height="15.0" fill="rgb(213,89,42)" rx="2" ry="2" />
<text  x="1192.23" y="351.5" ></text>
</g>
<g >
<title>ThreadLocalAllocBuffer::accumulate_and_reset_statistics(ThreadLocalAllocStats*)      (1 samples, 0.03%)</title><rect x="28.6" y="293" width="0.4" height="15.0" fill="rgb(210,83,38)" rx="2" ry="2" />
<text  x="31.59" y="303.5" ></text>
</g>
<g >
<title>Thread::call_run() (36 samples, 1.18%)</title><rect x="19.7" y="485" width="13.9" height="15.0" fill="rgb(241,142,36)" rx="2" ry="2" />
<text  x="22.68" y="495.5" ></text>
</g>
<g >
<title>__softirqentry_text_start      (1 samples, 0.03%)</title><rect x="211.4" y="325" width="0.4" height="15.0" fill="rgb(212,212,17)" rx="2" ry="2" />
<text  x="214.38" y="335.5" ></text>
</g>
<g >
<title>LogStream::write(char const*, unsigned long) (1 samples, 0.03%)</title><rect x="29.0" y="293" width="0.4" height="15.0" fill="rgb(244,115,48)" rx="2" ry="2" />
<text  x="31.98" y="303.5" ></text>
</g>
<g >
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (2 samples, 0.07%)</title><rect x="10.0" y="229" width="0.8" height="15.0" fill="rgb(254,220,25)" rx="2" ry="2" />
<text  x="13.00" y="239.5" ></text>
</g>
<g >
<title>irq_exit (1 samples, 0.03%)</title><rect x="210.2" y="341" width="0.4" height="15.0" fill="rgb(231,200,10)" rx="2" ry="2" />
<text  x="213.22" y="351.5" ></text>
</g>
<g >
<title>LoadNode::Identity(PhaseGVN*) (2 samples, 0.07%)</title><rect x="10.8" y="341" width="0.7" height="15.0" fill="rgb(218,186,52)" rx="2" ry="2" />
<text  x="13.77" y="351.5" ></text>
</g>
<g >
<title>Compilation::compile_java_method() (2 samples, 0.07%)</title><rect x="10.0" y="373" width="0.8" height="15.0" fill="rgb(221,30,43)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.03%)</title><rect x="841.5" y="309" width="0.3" height="15.0" fill="rgb(236,168,51)" rx="2" ry="2" />
<text  x="844.46" y="319.5" ></text>
</g>
<g >
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*)      (1 samples, 0.03%)</title><rect x="838.0" y="341" width="0.4" height="15.0" fill="rgb(219,207,43)" rx="2" ry="2" />
<text  x="840.98" y="351.5" ></text>
</g>
<g >
<title>GCTaskManager::note_completion(unsigned int)      (1 samples, 0.03%)</title><rect x="11.5" y="453" width="0.4" height="15.0" fill="rgb(228,134,37)" rx="2" ry="2" />
<text  x="14.55" y="463.5" ></text>
</g>
<g >
<title>thread_native_entry(Thread*) (2 samples, 0.07%)</title><rect x="10.8" y="501" width="0.7" height="15.0" fill="rgb(213,12,14)" rx="2" ry="2" />
<text  x="13.77" y="511.5" ></text>
</g>
<g >
<title>VMThread::loop() (34 samples, 1.12%)</title><rect x="19.7" y="453" width="13.1" height="15.0" fill="rgb(221,166,7)" rx="2" ry="2" />
<text  x="22.68" y="463.5" ></text>
</g>
<g >
<title>VbglR0GRPerform      (1 samples, 0.03%)</title><rect x="210.2" y="245" width="0.4" height="15.0" fill="rgb(246,76,45)" rx="2" ry="2" />
<text  x="213.22" y="255.5" ></text>
</g>
<g >
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="183.9" y="309" width="0.4" height="15.0" fill="rgb(239,227,6)" rx="2" ry="2" />
<text  x="186.88" y="319.5" ></text>
</g>
<g >
<title>Main.loop      (33 samples, 1.08%)</title><rect x="841.8" y="389" width="12.8" height="15.0" fill="rgb(227,118,2)" rx="2" ry="2" />
<text  x="844.85" y="399.5" ></text>
</g>
<g >
<title>rtTimerLinuxStdCallback (1 samples, 0.03%)</title><rect x="210.2" y="277" width="0.4" height="15.0" fill="rgb(232,110,54)" rx="2" ry="2" />
<text  x="213.22" y="287.5" ></text>
</g>
<g >
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const      (1 samples, 0.03%)</title><rect x="712.9" y="293" width="0.4" height="15.0" fill="rgb(212,194,6)" rx="2" ry="2" />
<text  x="715.89" y="303.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (10 samples, 0.33%)</title><rect x="716.8" y="357" width="3.8" height="15.0" fill="rgb(238,83,49)" rx="2" ry="2" />
<text  x="719.76" y="367.5" ></text>
</g>
<g >
<title>start_thread (2 samples, 0.07%)</title><rect x="10.0" y="517" width="0.8" height="15.0" fill="rgb(235,116,28)" rx="2" ry="2" />
<text  x="13.00" y="527.5" ></text>
</g>
<g >
<title>SafepointSynchronize::begin() (10 samples, 0.33%)</title><rect x="20.5" y="437" width="3.8" height="15.0" fill="rgb(236,201,4)" rx="2" ry="2" />
<text  x="23.46" y="447.5" ></text>
</g>
<g >
<title>oopDesc* PSPromotionManager::copy_to_survivor_space&lt;false&gt;(oopDesc*)      (5 samples, 0.16%)</title><rect x="14.3" y="421" width="1.9" height="15.0" fill="rgb(232,223,41)" rx="2" ry="2" />
<text  x="17.26" y="431.5" ></text>
</g>
<g >
<title>java.util.HashMap.resize (10 samples, 0.33%)</title><rect x="838.0" y="373" width="3.8" height="15.0" fill="rgb(227,52,13)" rx="2" ry="2" />
<text  x="840.98" y="383.5" ></text>
</g>
<g >
<title>MemAllocator::allocate() const (2 samples, 0.07%)</title><rect x="712.9" y="325" width="0.8" height="15.0" fill="rgb(211,206,19)" rx="2" ry="2" />
<text  x="715.89" y="335.5" ></text>
</g>
<g >
<title>VbglR0GRPerform      (1 samples, 0.03%)</title><rect x="841.5" y="229" width="0.3" height="15.0" fill="rgb(235,168,24)" rx="2" ry="2" />
<text  x="844.46" y="239.5" ></text>
</g>
<g >
<title>outputStream::do_vsnprintf_and_write_with_automatic_buffer(char const*, __va_list_tag*, bool) (1 samples, 0.03%)</title><rect x="29.0" y="309" width="0.4" height="15.0" fill="rgb(219,146,42)" rx="2" ry="2" />
<text  x="31.98" y="319.5" ></text>
</g>
<g >
<title>CompileBroker::compiler_thread_loop() (2 samples, 0.07%)</title><rect x="10.8" y="453" width="0.7" height="15.0" fill="rgb(216,53,51)" rx="2" ry="2" />
<text  x="13.77" y="463.5" ></text>
</g>
<g >
<title>ObjectSynchronizer::deflate_thread_local_monitors(Thread*, DeflateMonitorCounters*) (1 samples, 0.03%)</title><rect x="22.8" y="373" width="0.4" height="15.0" fill="rgb(221,106,6)" rx="2" ry="2" />
<text  x="25.78" y="383.5" ></text>
</g>
<g >
<title>call_timer_fn (1 samples, 0.03%)</title><rect x="210.2" y="293" width="0.4" height="15.0" fill="rgb(211,34,17)" rx="2" ry="2" />
<text  x="213.22" y="303.5" ></text>
</g>
<g >
<title>ObjectSampler::is_created()      (1 samples, 0.03%)</title><rect x="183.9" y="277" width="0.4" height="15.0" fill="rgb(215,195,19)" rx="2" ry="2" />
<text  x="186.88" y="287.5" ></text>
</g>
<g >
<title>_new_instance_Java (1 samples, 0.03%)</title><rect x="1112.2" y="357" width="0.3" height="15.0" fill="rgb(233,150,34)" rx="2" ry="2" />
<text  x="1115.16" y="367.5" ></text>
</g>
<g >
<title>ParallelScavengeHeap::ensure_parsability(bool) (1 samples, 0.03%)</title><rect x="28.6" y="341" width="0.4" height="15.0" fill="rgb(235,161,2)" rx="2" ry="2" />
<text  x="31.59" y="351.5" ></text>
</g>
<g >
<title>JavaThread::thread_main_inner() (2 samples, 0.07%)</title><rect x="10.8" y="469" width="0.7" height="15.0" fill="rgb(248,31,17)" rx="2" ry="2" />
<text  x="13.77" y="479.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.03%)</title><rect x="209.8" y="341" width="0.4" height="15.0" fill="rgb(246,128,23)" rx="2" ry="2" />
<text  x="212.83" y="351.5" ></text>
</g>
<g >
<title>all (3,047 samples, 100%)</title><rect x="10.0" y="549" width="1180.0" height="15.0" fill="rgb(228,96,16)" rx="2" ry="2" />
<text  x="13.00" y="559.5" ></text>
</g>
<g >
<title>Type::hashcons() (2 samples, 0.07%)</title><rect x="10.8" y="293" width="0.7" height="15.0" fill="rgb(238,7,46)" rx="2" ry="2" />
<text  x="13.77" y="303.5" ></text>
</g>
<g >
<title>VMThread::evaluate_operation(VM_Operation*) [clone .constprop.68] (22 samples, 0.72%)</title><rect x="24.3" y="437" width="8.5" height="15.0" fill="rgb(253,160,48)" rx="2" ry="2" />
<text  x="27.33" y="447.5" ></text>
</g>
<g >
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWordImpl**, unsigned long, unsigned long, Thread*) (2 samples, 0.07%)</title><rect x="714.0" y="309" width="0.8" height="15.0" fill="rgb(207,171,40)" rx="2" ry="2" />
<text  x="717.05" y="319.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (3 samples, 0.10%)</title><rect x="57.2" y="517" width="1.2" height="15.0" fill="rgb(235,10,10)" rx="2" ry="2" />
<text  x="60.25" y="527.5" ></text>
</g>
<g >
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*)      (1 samples, 0.03%)</title><rect x="839.1" y="341" width="0.4" height="15.0" fill="rgb(226,4,53)" rx="2" ry="2" />
<text  x="842.14" y="351.5" ></text>
</g>
<g >
<title>oopDesc* PSPromotionManager::copy_to_survivor_space&lt;false&gt;(oopDesc*) (2 samples, 0.07%)</title><rect x="16.2" y="421" width="0.8" height="15.0" fill="rgb(229,196,30)" rx="2" ry="2" />
<text  x="19.20" y="431.5" ></text>
</g>
<g >
<title>Compilation::compile_method() (2 samples, 0.07%)</title><rect x="10.0" y="389" width="0.8" height="15.0" fill="rgb(238,174,2)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (2 samples, 0.07%)</title><rect x="10.8" y="405" width="0.7" height="15.0" fill="rgb(215,132,5)" rx="2" ry="2" />
<text  x="13.77" y="415.5" ></text>
</g>
<g >
<title>irq_exit (1 samples, 0.03%)</title><rect x="1189.6" y="357" width="0.4" height="15.0" fill="rgb(250,56,44)" rx="2" ry="2" />
<text  x="1192.61" y="367.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (10 samples, 0.33%)</title><rect x="716.8" y="373" width="3.8" height="15.0" fill="rgb(218,201,41)" rx="2" ry="2" />
<text  x="719.76" y="383.5" ></text>
</g>
<g >
<title>pthread_cond_signal@@GLIBC_2.3.2 (2 samples, 0.07%)</title><rect x="58.4" y="517" width="0.8" height="15.0" fill="rgb(208,213,19)" rx="2" ry="2" />
<text  x="61.41" y="527.5" ></text>
</g>
<g >
<title>SafepointSynchronize::synchronize_threads(long, int, int*) (3 samples, 0.10%)</title><rect x="23.2" y="421" width="1.1" height="15.0" fill="rgb(244,221,19)" rx="2" ry="2" />
<text  x="26.17" y="431.5" ></text>
</g>
<g >
<title>jio_vsnprintf (2 samples, 0.07%)</title><rect x="19.7" y="421" width="0.8" height="15.0" fill="rgb(244,213,52)" rx="2" ry="2" />
<text  x="22.68" y="431.5" ></text>
</g>
<g >
<title>thread_native_entry(Thread*) (2 samples, 0.07%)</title><rect x="10.0" y="501" width="0.8" height="15.0" fill="rgb(227,72,36)" rx="2" ry="2" />
<text  x="13.00" y="511.5" ></text>
</g>
<g >
<title>LogTagSet::vwrite(LogLevel::type, char const*, __va_list_tag*)      (1 samples, 0.03%)</title><rect x="29.0" y="261" width="0.4" height="15.0" fill="rgb(228,206,7)" rx="2" ry="2" />
<text  x="31.98" y="271.5" ></text>
</g>
<g >
<title>GCTaskThread::run() (16 samples, 0.53%)</title><rect x="11.5" y="469" width="6.2" height="15.0" fill="rgb(239,92,31)" rx="2" ry="2" />
<text  x="14.55" y="479.5" ></text>
</g>
<g >
<title>irq_exit (1 samples, 0.03%)</title><rect x="32.5" y="325" width="0.3" height="15.0" fill="rgb(252,84,42)" rx="2" ry="2" />
<text  x="35.46" y="335.5" ></text>
</g>
<g >
<title>StackFrameStream::StackFrameStream(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="21.6" y="373" width="0.4" height="15.0" fill="rgb(235,89,33)" rx="2" ry="2" />
<text  x="24.62" y="383.5" ></text>
</g>
<g >
<title>java (2,986 samples, 98.00%)</title><rect x="33.6" y="533" width="1156.4" height="15.0" fill="rgb(211,30,38)" rx="2" ry="2" />
<text  x="36.62" y="543.5" >java</text>
</g>
<g >
<title>outputStream::print_cr(char const*, ...) (1 samples, 0.03%)</title><rect x="29.0" y="325" width="0.4" height="15.0" fill="rgb(246,33,1)" rx="2" ry="2" />
<text  x="31.98" y="335.5" ></text>
</g>
<g >
<title>nmethod::oops_do(OopClosure*, bool)      (1 samples, 0.03%)</title><rect x="12.7" y="405" width="0.4" height="15.0" fill="rgb(231,227,14)" rx="2" ry="2" />
<text  x="15.71" y="415.5" ></text>
</g>
<g >
<title>start_thread (2,920 samples, 95.83%)</title><rect x="59.2" y="517" width="1130.8" height="15.0" fill="rgb(212,227,36)" rx="2" ry="2" />
<text  x="62.18" y="527.5" >start_thread</text>
</g>
<g >
<title>_new_array_Java (2 samples, 0.07%)</title><rect x="1111.4" y="357" width="0.8" height="15.0" fill="rgb(239,207,52)" rx="2" ry="2" />
<text  x="1114.38" y="367.5" ></text>
</g>
<g >
<title>C2 CompilerThre (2 samples, 0.07%)</title><rect x="10.8" y="533" width="0.7" height="15.0" fill="rgb(248,115,47)" rx="2" ry="2" />
<text  x="13.77" y="543.5" ></text>
</g>
<g >
<title>__softirqentry_text_start      (2 samples, 0.07%)</title><rect x="1112.5" y="309" width="0.8" height="15.0" fill="rgb(235,153,49)" rx="2" ry="2" />
<text  x="1115.55" y="319.5" ></text>
</g>
<g >
<title>[UNKNOWN]      (1 samples, 0.03%)</title><rect x="23.2" y="405" width="0.4" height="15.0" fill="rgb(221,11,7)" rx="2" ry="2" />
<text  x="26.17" y="415.5" ></text>
</g>
<g >
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (2 samples, 0.07%)</title><rect x="10.0" y="421" width="0.8" height="15.0" fill="rgb(228,165,7)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>schedule (1 samples, 0.03%)</title><rect x="1188.8" y="309" width="0.4" height="15.0" fill="rgb(207,98,32)" rx="2" ry="2" />
<text  x="1191.84" y="319.5" ></text>
</g>
<g >
<title>ret_from_intr (1 samples, 0.03%)</title><rect x="211.4" y="373" width="0.4" height="15.0" fill="rgb(242,105,42)" rx="2" ry="2" />
<text  x="214.38" y="383.5" ></text>
</g>
<g >
<title>[UNKNOWN] (2 samples, 0.07%)</title><rect x="18.5" y="517" width="0.8" height="15.0" fill="rgb(229,67,27)" rx="2" ry="2" />
<text  x="21.52" y="527.5" ></text>
</g>
<g >
<title>ConstantPool::impl_signature_ref_at(int, bool)      (1 samples, 0.03%)</title><rect x="12.3" y="421" width="0.4" height="15.0" fill="rgb(212,136,49)" rx="2" ry="2" />
<text  x="15.32" y="431.5" ></text>
</g>
<g >
<title>thread_native_entry(Thread*) (36 samples, 1.18%)</title><rect x="19.7" y="501" width="13.9" height="15.0" fill="rgb(227,146,21)" rx="2" ry="2" />
<text  x="22.68" y="511.5" ></text>
</g>
<g >
<title>PhaseIterGVN::optimize() (2 samples, 0.07%)</title><rect x="10.8" y="373" width="0.7" height="15.0" fill="rgb(236,114,40)" rx="2" ry="2" />
<text  x="13.77" y="383.5" ></text>
</g>
<g >
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (2 samples, 0.07%)</title><rect x="10.0" y="149" width="0.8" height="15.0" fill="rgb(238,197,0)" rx="2" ry="2" />
<text  x="13.00" y="159.5" ></text>
</g>
<g >
<title>Main.count (336 samples, 11.03%)</title><rect x="711.7" y="389" width="130.1" height="15.0" fill="rgb(223,43,4)" rx="2" ry="2" />
<text  x="714.73" y="399.5" >Main.count</text>
</g>
<g >
<title>do_IRQ (1 samples, 0.03%)</title><rect x="211.4" y="357" width="0.4" height="15.0" fill="rgb(229,176,42)" rx="2" ry="2" />
<text  x="214.38" y="367.5" ></text>
</g>
<g >
<title>do_futex (1 samples, 0.03%)</title><rect x="19.3" y="453" width="0.4" height="15.0" fill="rgb(227,118,41)" rx="2" ry="2" />
<text  x="22.29" y="463.5" ></text>
</g>
<g >
<title>BlockBegin::iterate_preorder(BlockClosure*) (2 samples, 0.07%)</title><rect x="10.0" y="325" width="0.8" height="15.0" fill="rgb(211,80,31)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="19.3" y="501" width="0.4" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="22.29" y="511.5" ></text>
</g>
<g >
<title>Main.count (70 samples, 2.30%)</title><rect x="183.1" y="373" width="27.1" height="15.0" fill="rgb(217,184,0)" rx="2" ry="2" />
<text  x="186.11" y="383.5" >M..</text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="209.8" y="325" width="0.4" height="15.0" fill="rgb(251,65,43)" rx="2" ry="2" />
<text  x="212.83" y="335.5" ></text>
</g>
<g >
<title>CollectedHeap::ensure_parsability(bool) (1 samples, 0.03%)</title><rect x="28.6" y="325" width="0.4" height="15.0" fill="rgb(247,158,40)" rx="2" ry="2" />
<text  x="31.59" y="335.5" ></text>
</g>
<g >
<title>start_thread (36 samples, 1.18%)</title><rect x="19.7" y="517" width="13.9" height="15.0" fill="rgb(230,41,12)" rx="2" ry="2" />
<text  x="22.68" y="527.5" ></text>
</g>
<g >
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (2 samples, 0.07%)</title><rect x="10.0" y="181" width="0.8" height="15.0" fill="rgb(214,24,26)" rx="2" ry="2" />
<text  x="13.00" y="191.5" ></text>
</g>
<g >
<title>Main.count      (663 samples, 21.76%)</title><rect x="854.6" y="373" width="256.8" height="15.0" fill="rgb(246,177,46)" rx="2" ry="2" />
<text  x="857.63" y="383.5" >Main.count     </text>
</g>
<g >
<title>ParallelScavengeHeap::mem_allocate(unsigned long, bool*)      (3 samples, 0.10%)</title><rect x="715.2" y="293" width="1.2" height="15.0" fill="rgb(231,134,32)" rx="2" ry="2" />
<text  x="718.21" y="303.5" ></text>
</g>
<g >
<title>[UNKNOWN] (1 samples, 0.03%)</title><rect x="32.5" y="373" width="0.3" height="15.0" fill="rgb(212,187,28)" rx="2" ry="2" />
<text  x="35.46" y="383.5" ></text>
</g>
<g >
<title>[UNKNOWN]      (1 samples, 0.03%)</title><rect x="713.7" y="325" width="0.3" height="15.0" fill="rgb(223,10,29)" rx="2" ry="2" />
<text  x="716.66" y="335.5" ></text>
</g>
<g >
<title>__softirqentry_text_start      (1 samples, 0.03%)</title><rect x="32.5" y="309" width="0.3" height="15.0" fill="rgb(222,52,48)" rx="2" ry="2" />
<text  x="35.46" y="319.5" ></text>
</g>
<g >
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (2 samples, 0.07%)</title><rect x="10.0" y="197" width="0.8" height="15.0" fill="rgb(207,189,29)" rx="2" ry="2" />
<text  x="13.00" y="207.5" ></text>
</g>
<g >
<title>__softirqentry_text_start      (5 samples, 0.16%)</title><rect x="839.5" y="309" width="2.0" height="15.0" fill="rgb(206,131,20)" rx="2" ry="2" />
<text  x="842.52" y="319.5" ></text>
</g>
<g >
<title>java.util.HashMap.resize      (303 samples, 9.94%)</title><rect x="720.6" y="373" width="117.4" height="15.0" fill="rgb(247,57,6)" rx="2" ry="2" />
<text  x="723.63" y="383.5" >java.util.Hash..</text>
</g>
<g >
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (2 samples, 0.07%)</title><rect x="712.9" y="309" width="0.8" height="15.0" fill="rgb(254,226,47)" rx="2" ry="2" />
<text  x="715.89" y="319.5" ></text>
</g>
<g >
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="183.9" y="341" width="0.4" height="15.0" fill="rgb(214,171,33)" rx="2" ry="2" />
<text  x="186.88" y="351.5" ></text>
</g>
<g >
<title>TypeArrayKlass::allocate_common(int, bool, Thread*)      (2 samples, 0.07%)</title><rect x="1111.4" y="341" width="0.8" height="15.0" fill="rgb(218,86,16)" rx="2" ry="2" />
<text  x="1114.38" y="351.5" ></text>
</g>
<g >
<title>ParallelScavengeHeap::print_on(outputStream*) const (1 samples, 0.03%)</title><rect x="27.8" y="325" width="0.4" height="15.0" fill="rgb(244,76,3)" rx="2" ry="2" />
<text  x="30.81" y="335.5" ></text>
</g>
<g >
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.07%)</title><rect x="838.4" y="341" width="0.7" height="15.0" fill="rgb(210,26,30)" rx="2" ry="2" />
<text  x="841.36" y="351.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (2 samples, 0.07%)</title><rect x="1112.5" y="357" width="0.8" height="15.0" fill="rgb(217,222,0)" rx="2" ry="2" />
<text  x="1115.55" y="367.5" ></text>
</g>
<g >
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (4 samples, 0.13%)</title><rect x="715.2" y="309" width="1.6" height="15.0" fill="rgb(252,163,7)" rx="2" ry="2" />
<text  x="718.21" y="319.5" ></text>
</g>
<g >
<title>EventMark::EventMark(char const*, ...) (2 samples, 0.07%)</title><rect x="19.7" y="437" width="0.8" height="15.0" fill="rgb(232,68,23)" rx="2" ry="2" />
<text  x="22.68" y="447.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.03%)</title><rect x="210.2" y="373" width="0.4" height="15.0" fill="rgb(241,186,1)" rx="2" ry="2" />
<text  x="213.22" y="383.5" ></text>
</g>
<g >
<title>futex_wake (2 samples, 0.07%)</title><rect x="58.4" y="437" width="0.8" height="15.0" fill="rgb(206,155,5)" rx="2" ry="2" />
<text  x="61.41" y="447.5" ></text>
</g>
<g >
<title>LeakProfiler::is_running()      (2 samples, 0.07%)</title><rect x="714.0" y="293" width="0.8" height="15.0" fill="rgb(235,188,45)" rx="2" ry="2" />
<text  x="717.05" y="303.5" ></text>
</g>
<g >
<title>C1 CompilerThre (2 samples, 0.07%)</title><rect x="10.0" y="533" width="0.8" height="15.0" fill="rgb(243,149,28)" rx="2" ry="2" />
<text  x="13.00" y="543.5" ></text>
</g>
<g >
<title>VbglR0GRPerform      (1 samples, 0.03%)</title><rect x="1189.6" y="261" width="0.4" height="15.0" fill="rgb(206,213,32)" rx="2" ry="2" />
<text  x="1192.61" y="271.5" ></text>
</g>
<g >
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (2 samples, 0.07%)</title><rect x="10.0" y="261" width="0.8" height="15.0" fill="rgb(212,10,49)" rx="2" ry="2" />
<text  x="13.00" y="271.5" ></text>
</g>
<g >
<title>MarkingCodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.03%)</title><rect x="12.7" y="421" width="0.4" height="15.0" fill="rgb(218,171,39)" rx="2" ry="2" />
<text  x="15.71" y="431.5" ></text>
</g>
<g >
<title>PSPromotionManager::drain_stacks_depth(bool) (9 samples, 0.30%)</title><rect x="14.3" y="437" width="3.4" height="15.0" fill="rgb(222,175,12)" rx="2" ry="2" />
<text  x="17.26" y="447.5" ></text>
</g>
<g >
<title>      (59 samples, 1.94%)</title><rect x="33.6" y="517" width="22.9" height="15.0" fill="rgb(249,21,53)" rx="2" ry="2" />
<text  x="36.62" y="527.5" > ..</text>
</g>
<g >
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (2 samples, 0.07%)</title><rect x="10.0" y="293" width="0.8" height="15.0" fill="rgb(247,118,20)" rx="2" ry="2" />
<text  x="13.00" y="303.5" ></text>
</g>
<g >
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (4 samples, 0.13%)</title><rect x="712.5" y="357" width="1.5" height="15.0" fill="rgb(221,7,23)" rx="2" ry="2" />
<text  x="715.50" y="367.5" ></text>
</g>
<g >
<title>call_timer_fn (1 samples, 0.03%)</title><rect x="841.5" y="277" width="0.3" height="15.0" fill="rgb(234,201,25)" rx="2" ry="2" />
<text  x="844.46" y="287.5" ></text>
</g>
<g >
<title>__pthread_mutex_lock      (2 samples, 0.07%)</title><rect x="27.0" y="389" width="0.8" height="15.0" fill="rgb(222,86,9)" rx="2" ry="2" />
<text  x="30.04" y="399.5" ></text>
</g>
<g >
<title>run_timer_softirq (1 samples, 0.03%)</title><rect x="210.2" y="309" width="0.4" height="15.0" fill="rgb(229,229,38)" rx="2" ry="2" />
<text  x="213.22" y="319.5" ></text>
</g>
<g >
<title>PSYoungGen::print_on(outputStream*) const (1 samples, 0.03%)</title><rect x="27.8" y="309" width="0.4" height="15.0" fill="rgb(224,205,13)" rx="2" ry="2" />
<text  x="30.81" y="319.5" ></text>
</g>
<g >
<title>do_futex (2 samples, 0.07%)</title><rect x="58.4" y="453" width="0.8" height="15.0" fill="rgb(249,28,31)" rx="2" ry="2" />
<text  x="61.41" y="463.5" ></text>
</g>
<g >
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.13%)</title><rect x="712.5" y="341" width="1.5" height="15.0" fill="rgb(236,220,51)" rx="2" ry="2" />
<text  x="715.50" y="351.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.03%)</title><rect x="1189.6" y="389" width="0.4" height="15.0" fill="rgb(254,101,19)" rx="2" ry="2" />
<text  x="1192.61" y="399.5" ></text>
</g>
<g >
<title>TypeInstPtr::hash() const      (2 samples, 0.07%)</title><rect x="10.8" y="277" width="0.7" height="15.0" fill="rgb(226,128,20)" rx="2" ry="2" />
<text  x="13.77" y="287.5" ></text>
</g>
<g >
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (5 samples, 0.16%)</title><rect x="21.2" y="405" width="2.0" height="15.0" fill="rgb(207,38,5)" rx="2" ry="2" />
<text  x="24.23" y="415.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="716.4" y="261" width="0.4" height="15.0" fill="rgb(219,146,45)" rx="2" ry="2" />
<text  x="719.37" y="271.5" ></text>
</g>
<g >
<title>vgdrvHeartbeatTimerHandler (1 samples, 0.03%)</title><rect x="1189.6" y="277" width="0.4" height="15.0" fill="rgb(237,79,38)" rx="2" ry="2" />
<text  x="1192.61" y="287.5" ></text>
</g>
<g >
<title>sys_futex (1 samples, 0.03%)</title><rect x="19.3" y="469" width="0.4" height="15.0" fill="rgb(249,200,41)" rx="2" ry="2" />
<text  x="22.29" y="479.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="1188.8" y="357" width="0.4" height="15.0" fill="rgb(244,70,26)" rx="2" ry="2" />
<text  x="1191.84" y="367.5" ></text>
</g>
<g >
<title>thread_native_entry(Thread*) (2 samples, 0.07%)</title><rect x="17.7" y="501" width="0.8" height="15.0" fill="rgb(228,140,30)" rx="2" ry="2" />
<text  x="20.75" y="511.5" ></text>
</g>
<g >
<title>ThreadJavaMain (2,920 samples, 95.83%)</title><rect x="59.2" y="501" width="1130.8" height="15.0" fill="rgb(220,33,36)" rx="2" ry="2" />
<text  x="62.18" y="511.5" >ThreadJavaMain</text>
</g>
<g >
<title>TypeInstPtr::add_offset(long) const (2 samples, 0.07%)</title><rect x="10.8" y="309" width="0.7" height="15.0" fill="rgb(240,159,11)" rx="2" ry="2" />
<text  x="13.77" y="319.5" ></text>
</g>
<g >
<title>__softirqentry_text_start      (3 samples, 0.10%)</title><rect x="57.2" y="469" width="1.2" height="15.0" fill="rgb(231,26,28)" rx="2" ry="2" />
<text  x="60.25" y="479.5" ></text>
</g>
<g >
<title>LogTargetHandle::print(char const*, ...) (1 samples, 0.03%)</title><rect x="29.0" y="277" width="0.4" height="15.0" fill="rgb(205,41,4)" rx="2" ry="2" />
<text  x="31.98" y="287.5" ></text>
</g>
<g >
<title>__lll_unlock_wake      (2 samples, 0.07%)</title><rect x="32.8" y="453" width="0.8" height="15.0" fill="rgb(237,166,12)" rx="2" ry="2" />
<text  x="35.85" y="463.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (2 samples, 0.07%)</title><rect x="1112.5" y="341" width="0.8" height="15.0" fill="rgb(241,206,52)" rx="2" ry="2" />
<text  x="1115.55" y="351.5" ></text>
</g>
<g >
<title>ThreadRootsTask::do_it(GCTaskManager*, unsigned int) (14 samples, 0.46%)</title><rect x="12.3" y="453" width="5.4" height="15.0" fill="rgb(218,81,14)" rx="2" ry="2" />
<text  x="15.32" y="463.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="1188.8" y="341" width="0.4" height="15.0" fill="rgb(236,98,32)" rx="2" ry="2" />
<text  x="1191.84" y="351.5" ></text>
</g>
<g >
<title>SafepointSynchronize::do_cleanup_tasks() (6 samples, 0.20%)</title><rect x="20.8" y="421" width="2.4" height="15.0" fill="rgb(225,58,2)" rx="2" ry="2" />
<text  x="23.84" y="431.5" ></text>
</g>
<g >
<title>Main.count      (23 samples, 0.75%)</title><rect x="211.8" y="405" width="8.9" height="15.0" fill="rgb(252,156,4)" rx="2" ry="2" />
<text  x="214.77" y="415.5" ></text>
</g>
<g >
<title>PeriodicTask::real_time_tick(int)      (1 samples, 0.03%)</title><rect x="17.7" y="453" width="0.4" height="15.0" fill="rgb(236,57,12)" rx="2" ry="2" />
<text  x="20.75" y="463.5" ></text>
</g>
<g >
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="183.9" y="325" width="0.4" height="15.0" fill="rgb(230,101,2)" rx="2" ry="2" />
<text  x="186.88" y="335.5" ></text>
</g>
<g >
<title>call_stub (2,920 samples, 95.83%)</title><rect x="59.2" y="421" width="1130.8" height="15.0" fill="rgb(211,0,23)" rx="2" ry="2" />
<text  x="62.18" y="431.5" >call_stub</text>
</g>
<g >
<title>__schedule (1 samples, 0.03%)</title><rect x="1188.8" y="293" width="0.4" height="15.0" fill="rgb(226,160,7)" rx="2" ry="2" />
<text  x="1191.84" y="303.5" ></text>
</g>
<g >
<title>sys_futex (2 samples, 0.07%)</title><rect x="58.4" y="469" width="0.8" height="15.0" fill="rgb(218,128,10)" rx="2" ry="2" />
<text  x="61.41" y="479.5" ></text>
</g>
<g >
<title>__softirqentry_text_start      (1 samples, 0.03%)</title><rect x="184.3" y="309" width="0.4" height="15.0" fill="rgb(226,135,27)" rx="2" ry="2" />
<text  x="187.27" y="319.5" ></text>
</g>
<g >
<title>do_syscall_64 (2 samples, 0.07%)</title><rect x="58.4" y="485" width="0.8" height="15.0" fill="rgb(205,169,8)" rx="2" ry="2" />
<text  x="61.41" y="495.5" ></text>
</g>
<g >
<title>MemAllocator::allocate() const (7 samples, 0.23%)</title><rect x="714.0" y="325" width="2.8" height="15.0" fill="rgb(245,206,19)" rx="2" ry="2" />
<text  x="717.05" y="335.5" ></text>
</g>
<g >
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (2 samples, 0.07%)</title><rect x="10.0" y="245" width="0.8" height="15.0" fill="rgb(237,66,45)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>__nanosleep      (2 samples, 0.07%)</title><rect x="23.6" y="405" width="0.7" height="15.0" fill="rgb(250,162,26)" rx="2" ry="2" />
<text  x="26.55" y="415.5" ></text>
</g>
<g >
<title>call_timer_fn (1 samples, 0.03%)</title><rect x="1189.6" y="309" width="0.4" height="15.0" fill="rgb(249,129,29)" rx="2" ry="2" />
<text  x="1192.61" y="319.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="210.2" y="357" width="0.4" height="15.0" fill="rgb(210,97,15)" rx="2" ry="2" />
<text  x="213.22" y="367.5" ></text>
</g>
<g >
<title>ThreadLocalAllocBuffer::retire(ThreadLocalAllocStats*) (1 samples, 0.03%)</title><rect x="28.6" y="309" width="0.4" height="15.0" fill="rgb(238,48,52)" rx="2" ry="2" />
<text  x="31.59" y="319.5" ></text>
</g>
<g >
<title>run_timer_softirq (1 samples, 0.03%)</title><rect x="841.5" y="293" width="0.3" height="15.0" fill="rgb(247,213,50)" rx="2" ry="2" />
<text  x="844.46" y="303.5" ></text>
</g>
<g >
<title>VMThread::run() (36 samples, 1.18%)</title><rect x="19.7" y="469" width="13.9" height="15.0" fill="rgb(222,29,16)" rx="2" ry="2" />
<text  x="22.68" y="479.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (3 samples, 0.10%)</title><rect x="57.2" y="501" width="1.2" height="15.0" fill="rgb(213,144,30)" rx="2" ry="2" />
<text  x="60.25" y="511.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.03%)</title><rect x="32.5" y="357" width="0.3" height="15.0" fill="rgb(205,227,54)" rx="2" ry="2" />
<text  x="35.46" y="367.5" ></text>
</g>
<g >
<title>void PSPromotionManager::process_array_chunk_work&lt;unsigned int&gt;(oopDesc*, int, int)      (2 samples, 0.07%)</title><rect x="17.0" y="421" width="0.7" height="15.0" fill="rgb(223,98,27)" rx="2" ry="2" />
<text  x="19.97" y="431.5" ></text>
</g>
<g >
<title>rtTimerLinuxStdCallback (1 samples, 0.03%)</title><rect x="1189.6" y="293" width="0.4" height="15.0" fill="rgb(242,103,32)" rx="2" ry="2" />
<text  x="1192.61" y="303.5" ></text>
</g>
<g >
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*)      (2 samples, 0.07%)</title><rect x="711.7" y="373" width="0.8" height="15.0" fill="rgb(248,197,15)" rx="2" ry="2" />
<text  x="714.73" y="383.5" ></text>
</g>
<g >
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*)      (1 samples, 0.03%)</title><rect x="183.5" y="341" width="0.4" height="15.0" fill="rgb(223,78,46)" rx="2" ry="2" />
<text  x="186.50" y="351.5" ></text>
</g>
<g >
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (2 samples, 0.07%)</title><rect x="10.0" y="53" width="0.8" height="15.0" fill="rgb(229,122,9)" rx="2" ry="2" />
<text  x="13.00" y="63.5" ></text>
</g>
<g >
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (2 samples, 0.07%)</title><rect x="10.0" y="101" width="0.8" height="15.0" fill="rgb(238,165,40)" rx="2" ry="2" />
<text  x="13.00" y="111.5" ></text>
</g>
<g >
<title>VM_ParallelGCFailedAllocation::doit() (13 samples, 0.43%)</title><rect x="27.8" y="405" width="5.0" height="15.0" fill="rgb(251,17,9)" rx="2" ry="2" />
<text  x="30.81" y="415.5" ></text>
</g>
<g >
<title>ClassLoaderData::holder_phantom() const      (1 samples, 0.03%)</title><rect x="183.1" y="341" width="0.4" height="15.0" fill="rgb(239,84,20)" rx="2" ry="2" />
<text  x="186.11" y="351.5" ></text>
</g>
<g >
<title>_new_array_Java (4 samples, 0.13%)</title><rect x="838.0" y="357" width="1.5" height="15.0" fill="rgb(229,168,41)" rx="2" ry="2" />
<text  x="840.98" y="367.5" ></text>
</g>
<g >
<title>try_to_wake_up (2 samples, 0.07%)</title><rect x="58.4" y="405" width="0.8" height="15.0" fill="rgb(241,209,27)" rx="2" ry="2" />
<text  x="61.41" y="415.5" ></text>
</g>
<g >
<title>Thread::call_run() (16 samples, 0.53%)</title><rect x="11.5" y="485" width="6.2" height="15.0" fill="rgb(254,72,4)" rx="2" ry="2" />
<text  x="14.55" y="495.5" ></text>
</g>
<g >
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (2 samples, 0.07%)</title><rect x="10.0" y="165" width="0.8" height="15.0" fill="rgb(214,225,46)" rx="2" ry="2" />
<text  x="13.00" y="175.5" ></text>
</g>
<g >
<title>VM Periodic Tas (2 samples, 0.07%)</title><rect x="17.7" y="533" width="0.8" height="15.0" fill="rgb(239,176,21)" rx="2" ry="2" />
<text  x="20.75" y="543.5" ></text>
</g>
<g >
<title>VM_HandshakeAllThreads::doit()      (5 samples, 0.16%)</title><rect x="24.3" y="405" width="2.0" height="15.0" fill="rgb(210,115,16)" rx="2" ry="2" />
<text  x="27.33" y="415.5" ></text>
</g>
<g >
<title>java.util.HashMap.resize      (65 samples, 2.13%)</title><rect x="184.7" y="357" width="25.1" height="15.0" fill="rgb(229,175,37)" rx="2" ry="2" />
<text  x="187.66" y="367.5" >j..</text>
</g>
<g >
<title>Thread::call_run() (2 samples, 0.07%)</title><rect x="10.0" y="485" width="0.8" height="15.0" fill="rgb(213,191,21)" rx="2" ry="2" />
<text  x="13.00" y="495.5" ></text>
</g>
<g >
<title>PSScavenge::invoke() (9 samples, 0.30%)</title><rect x="27.8" y="373" width="3.5" height="15.0" fill="rgb(235,134,0)" rx="2" ry="2" />
<text  x="30.81" y="383.5" ></text>
</g>
<g >
<title>_new_instance_Java (3 samples, 0.10%)</title><rect x="183.1" y="357" width="1.2" height="15.0" fill="rgb(218,87,50)" rx="2" ry="2" />
<text  x="186.11" y="367.5" ></text>
</g>
<g >
<title>jni_CallStaticVoidMethod (2,920 samples, 95.83%)</title><rect x="59.2" y="469" width="1130.8" height="15.0" fill="rgb(205,88,11)" rx="2" ry="2" />
<text  x="62.18" y="479.5" >jni_CallStaticVoidMethod</text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.03%)</title><rect x="1189.2" y="373" width="0.4" height="15.0" fill="rgb(233,161,22)" rx="2" ry="2" />
<text  x="1192.23" y="383.5" ></text>
</g>
<g >
<title>CodeCacheSweeperThread::is_Code_cache_sweeper_thread() const      (1 samples, 0.03%)</title><rect x="21.2" y="389" width="0.4" height="15.0" fill="rgb(216,69,6)" rx="2" ry="2" />
<text  x="24.23" y="399.5" ></text>
</g>
<g >
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.07%)</title><rect x="10.8" y="357" width="0.7" height="15.0" fill="rgb(230,146,0)" rx="2" ry="2" />
<text  x="13.77" y="367.5" ></text>
</g>
<g >
<title>outputStream::do_vsnprintf_and_write_with_automatic_buffer(char const*, __va_list_tag*, bool) (1 samples, 0.03%)</title><rect x="27.8" y="261" width="0.4" height="15.0" fill="rgb(207,157,25)" rx="2" ry="2" />
<text  x="30.81" y="271.5" ></text>
</g>
<g >
<title>JavaThread::thread_main_inner() (2 samples, 0.07%)</title><rect x="10.0" y="469" width="0.8" height="15.0" fill="rgb(207,206,5)" rx="2" ry="2" />
<text  x="13.00" y="479.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.03%)</title><rect x="1189.2" y="325" width="0.4" height="15.0" fill="rgb(245,143,3)" rx="2" ry="2" />
<text  x="1192.23" y="335.5" ></text>
</g>
<g >
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (2 samples, 0.07%)</title><rect x="10.0" y="437" width="0.8" height="15.0" fill="rgb(213,168,33)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>futex_wake      (1 samples, 0.03%)</title><rect x="19.3" y="437" width="0.4" height="15.0" fill="rgb(238,55,22)" rx="2" ry="2" />
<text  x="22.29" y="447.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (6 samples, 0.20%)</title><rect x="839.5" y="341" width="2.3" height="15.0" fill="rgb(241,160,29)" rx="2" ry="2" />
<text  x="842.52" y="351.5" ></text>
</g>
<g >
<title>SubstitutionResolver::block_do(BlockBegin*)      (2 samples, 0.07%)</title><rect x="10.0" y="37" width="0.8" height="15.0" fill="rgb(245,188,1)" rx="2" ry="2" />
<text  x="13.00" y="47.5" ></text>
</g>
<g >
<title>Thread::call_run() (2 samples, 0.07%)</title><rect x="17.7" y="485" width="0.8" height="15.0" fill="rgb(212,106,5)" rx="2" ry="2" />
<text  x="20.75" y="495.5" ></text>
</g>
<g >
<title>Main.count (201 samples, 6.60%)</title><rect x="1111.4" y="373" width="77.8" height="15.0" fill="rgb(221,155,32)" rx="2" ry="2" />
<text  x="1114.38" y="383.5" >Main.count</text>
</g>
<g >
<title>start_thread (2 samples, 0.07%)</title><rect x="10.8" y="517" width="0.7" height="15.0" fill="rgb(212,216,9)" rx="2" ry="2" />
<text  x="13.77" y="527.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="1189.2" y="357" width="0.4" height="15.0" fill="rgb(249,94,53)" rx="2" ry="2" />
<text  x="1192.23" y="367.5" ></text>
</g>
<g >
<title>_new_instance_Java (7 samples, 0.23%)</title><rect x="714.0" y="373" width="2.8" height="15.0" fill="rgb(208,156,27)" rx="2" ry="2" />
<text  x="717.05" y="383.5" ></text>
</g>
<g >
<title>irq_exit (1 samples, 0.03%)</title><rect x="184.3" y="325" width="0.4" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="187.27" y="335.5" ></text>
</g>
<g >
<title>Main.loop (366 samples, 12.01%)</title><rect x="70.0" y="389" width="141.8" height="15.0" fill="rgb(231,4,51)" rx="2" ry="2" />
<text  x="73.03" y="399.5" >Main.loop</text>
</g>
<g >
<title>__schedule (1 samples, 0.03%)</title><rect x="716.4" y="229" width="0.4" height="15.0" fill="rgb(217,181,49)" rx="2" ry="2" />
<text  x="719.37" y="239.5" ></text>
</g>
<g >
<title>finish_task_switch      (1 samples, 0.03%)</title><rect x="716.4" y="213" width="0.4" height="15.0" fill="rgb(209,190,3)" rx="2" ry="2" />
<text  x="719.37" y="223.5" ></text>
</g>
<g >
<title>run_timer_softirq (1 samples, 0.03%)</title><rect x="1189.6" y="325" width="0.4" height="15.0" fill="rgb(219,15,3)" rx="2" ry="2" />
<text  x="1192.61" y="335.5" ></text>
</g>
<g >
<title>memcpy      (1 samples, 0.03%)</title><rect x="27.8" y="245" width="0.4" height="15.0" fill="rgb(208,199,18)" rx="2" ry="2" />
<text  x="30.81" y="255.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="32.5" y="341" width="0.3" height="15.0" fill="rgb(234,17,37)" rx="2" ry="2" />
<text  x="35.46" y="351.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.03%)</title><rect x="1188.8" y="325" width="0.4" height="15.0" fill="rgb(232,167,19)" rx="2" ry="2" />
<text  x="1191.84" y="335.5" ></text>
</g>
<g >
<title>irq_exit (10 samples, 0.33%)</title><rect x="716.8" y="341" width="3.8" height="15.0" fill="rgb(252,226,27)" rx="2" ry="2" />
<text  x="719.76" y="351.5" ></text>
</g>
<g >
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (2 samples, 0.07%)</title><rect x="10.0" y="117" width="0.8" height="15.0" fill="rgb(209,59,9)" rx="2" ry="2" />
<text  x="13.00" y="127.5" ></text>
</g>
<g >
<title>__vsnprintf      (2 samples, 0.07%)</title><rect x="19.7" y="405" width="0.8" height="15.0" fill="rgb(215,222,26)" rx="2" ry="2" />
<text  x="22.68" y="415.5" ></text>
</g>
<g >
<title>vgdrvHeartbeatTimerHandler (1 samples, 0.03%)</title><rect x="210.2" y="261" width="0.4" height="15.0" fill="rgb(209,99,47)" rx="2" ry="2" />
<text  x="213.22" y="271.5" ></text>
</g>
<g >
<title>__vsnprintf (2 samples, 0.07%)</title><rect x="18.5" y="501" width="0.8" height="15.0" fill="rgb(210,33,9)" rx="2" ry="2" />
<text  x="21.52" y="511.5" ></text>
</g>
<g >
<title>[UNKNOWN]      (3 samples, 0.10%)</title><rect x="31.3" y="373" width="1.2" height="15.0" fill="rgb(239,151,3)" rx="2" ry="2" />
<text  x="34.30" y="383.5" ></text>
</g>
<g >
<title>JavaMain (2,920 samples, 95.83%)</title><rect x="59.2" y="485" width="1130.8" height="15.0" fill="rgb(223,56,41)" rx="2" ry="2" />
<text  x="62.18" y="495.5" >JavaMain</text>
</g>
<g >
<title>ParallelSPCleanupThreadClosure::do_thread(Thread*) (2 samples, 0.07%)</title><rect x="22.4" y="389" width="0.8" height="15.0" fill="rgb(253,184,42)" rx="2" ry="2" />
<text  x="25.39" y="399.5" ></text>
</g>
<g >
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="713.3" y="293" width="0.4" height="15.0" fill="rgb(231,92,24)" rx="2" ry="2" />
<text  x="716.28" y="303.5" ></text>
</g>
<g >
<title>irq_exit (3 samples, 0.10%)</title><rect x="57.2" y="485" width="1.2" height="15.0" fill="rgb(208,128,13)" rx="2" ry="2" />
<text  x="60.25" y="495.5" ></text>
</g>
<g >
<title>JVMFlagEx::is_default(JVMFlagsEnum)      (1 samples, 0.03%)</title><rect x="28.2" y="325" width="0.4" height="15.0" fill="rgb(232,144,0)" rx="2" ry="2" />
<text  x="31.20" y="335.5" ></text>
</g>
<g >
<title>rtTimerLinuxStdCallback (1 samples, 0.03%)</title><rect x="841.5" y="261" width="0.3" height="15.0" fill="rgb(249,57,29)" rx="2" ry="2" />
<text  x="844.46" y="271.5" ></text>
</g>
<g >
<title>Interpreter      (6 samples, 0.20%)</title><rect x="59.2" y="405" width="2.3" height="15.0" fill="rgb(227,40,1)" rx="2" ry="2" />
<text  x="62.18" y="415.5" ></text>
</g>
<g >
<title>Compilation::build_hir() [clone .part.96] (2 samples, 0.07%)</title><rect x="10.0" y="357" width="0.8" height="15.0" fill="rgb(235,30,18)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>MutableSpace::print_on(outputStream*) const (1 samples, 0.03%)</title><rect x="27.8" y="293" width="0.4" height="15.0" fill="rgb(229,57,7)" rx="2" ry="2" />
<text  x="30.81" y="303.5" ></text>
</g>
<g >
<title>GCTaskManager::set_active_gang() (1 samples, 0.03%)</title><rect x="28.2" y="341" width="0.4" height="15.0" fill="rgb(250,202,51)" rx="2" ry="2" />
<text  x="31.20" y="351.5" ></text>
</g>
<g >
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (3 samples, 0.10%)</title><rect x="12.3" y="437" width="1.2" height="15.0" fill="rgb(206,75,29)" rx="2" ry="2" />
<text  x="15.32" y="447.5" ></text>
</g>
<g >
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2,920 samples, 95.83%)</title><rect x="59.2" y="437" width="1130.8" height="15.0" fill="rgb(218,144,48)" rx="2" ry="2" />
<text  x="62.18" y="447.5" >JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*)</text>
</g>
<g >
<title>MemAllocator::allocate() const (2 samples, 0.07%)</title><rect x="838.4" y="309" width="0.7" height="15.0" fill="rgb(209,226,53)" rx="2" ry="2" />
<text  x="841.36" y="319.5" ></text>
</g>
<g >
<title>CodeCache::find_blob(void*)      (1 samples, 0.03%)</title><rect x="21.6" y="357" width="0.4" height="15.0" fill="rgb(235,179,52)" rx="2" ry="2" />
<text  x="24.62" y="367.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (6 samples, 0.20%)</title><rect x="839.5" y="357" width="2.3" height="15.0" fill="rgb(222,95,42)" rx="2" ry="2" />
<text  x="842.52" y="367.5" ></text>
</g>
<g >
<title>GCId::current_or_undefined() (1 samples, 0.03%)</title><rect x="20.8" y="405" width="0.4" height="15.0" fill="rgb(213,157,43)" rx="2" ry="2" />
<text  x="23.84" y="415.5" ></text>
</g>
<g >
<title>GlobalValueNumbering::GlobalValueNumbering(IR*) (2 samples, 0.07%)</title><rect x="10.0" y="341" width="0.8" height="15.0" fill="rgb(219,89,49)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.03%)</title><rect x="716.4" y="277" width="0.4" height="15.0" fill="rgb(254,104,20)" rx="2" ry="2" />
<text  x="719.37" y="287.5" ></text>
</g>
<g >
<title>[UNKNOWN]      (2 samples, 0.07%)</title><rect x="26.3" y="389" width="0.7" height="15.0" fill="rgb(209,13,1)" rx="2" ry="2" />
<text  x="29.27" y="399.5" ></text>
</g>
<g >
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (7 samples, 0.23%)</title><rect x="714.0" y="357" width="2.8" height="15.0" fill="rgb(227,71,22)" rx="2" ry="2" />
<text  x="717.05" y="367.5" ></text>
</g>
<g >
<title>ClassLoaderData::holder_phantom() const      (1 samples, 0.03%)</title><rect x="1112.2" y="341" width="0.3" height="15.0" fill="rgb(243,110,31)" rx="2" ry="2" />
<text  x="1115.16" y="351.5" ></text>
</g>
<g >
<title>java.util.HashMap.resize (1 samples, 0.03%)</title><rect x="209.8" y="357" width="0.4" height="15.0" fill="rgb(236,216,39)" rx="2" ry="2" />
<text  x="212.83" y="367.5" ></text>
</g>
<g >
<title>__softirqentry_text_start      (1 samples, 0.03%)</title><rect x="209.8" y="293" width="0.4" height="15.0" fill="rgb(228,89,26)" rx="2" ry="2" />
<text  x="212.83" y="303.5" ></text>
</g>
<g >
<title>SafepointSynchronize::do_cleanup_tasks()      (1 samples, 0.03%)</title><rect x="20.5" y="421" width="0.3" height="15.0" fill="rgb(238,80,3)" rx="2" ry="2" />
<text  x="23.46" y="431.5" ></text>
</g>
<g >
<title>__softirqentry_text_start      (10 samples, 0.33%)</title><rect x="716.8" y="325" width="3.8" height="15.0" fill="rgb(246,24,38)" rx="2" ry="2" />
<text  x="719.76" y="335.5" ></text>
</g>
<g >
<title>schedule (1 samples, 0.03%)</title><rect x="716.4" y="245" width="0.4" height="15.0" fill="rgb(212,79,47)" rx="2" ry="2" />
<text  x="719.37" y="255.5" ></text>
</g>
<g >
<title>WatcherThread::run() (2 samples, 0.07%)</title><rect x="17.7" y="469" width="0.8" height="15.0" fill="rgb(240,121,21)" rx="2" ry="2" />
<text  x="20.75" y="479.5" ></text>
</g>
<g >
<title>jni_invoke_static(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .isra.83] [clone .constprop.254] (2,920 samples, 95.83%)</title><rect x="59.2" y="453" width="1130.8" height="15.0" fill="rgb(205,24,39)" rx="2" ry="2" />
<text  x="62.18" y="463.5" >jni_invoke_static(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .isra.83] [clone .constprop.254]</text>
</g>
<g >
<title>irq_exit (6 samples, 0.20%)</title><rect x="839.5" y="325" width="2.3" height="15.0" fill="rgb(236,210,22)" rx="2" ry="2" />
<text  x="842.52" y="335.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.03%)</title><rect x="1189.6" y="341" width="0.4" height="15.0" fill="rgb(233,175,8)" rx="2" ry="2" />
<text  x="1192.61" y="351.5" ></text>
</g>
<g >
<title>_new_array_Java (4 samples, 0.13%)</title><rect x="712.5" y="373" width="1.5" height="15.0" fill="rgb(205,163,37)" rx="2" ry="2" />
<text  x="715.50" y="383.5" ></text>
</g>
<g >
<title>Main.main      (122 samples, 4.00%)</title><rect x="220.7" y="405" width="47.2" height="15.0" fill="rgb(215,0,16)" rx="2" ry="2" />
<text  x="223.67" y="415.5" >Main..</text>
</g>
<g >
<title>Thread::muxRelease(long volatile*)      (1 samples, 0.03%)</title><rect x="22.8" y="357" width="0.4" height="15.0" fill="rgb(231,155,50)" rx="2" ry="2" />
<text  x="25.78" y="367.5" ></text>
</g>
<g >
<title>SystemDictionaryShared::oops_do(OopClosure*)      (1 samples, 0.03%)</title><rect x="11.9" y="437" width="0.4" height="15.0" fill="rgb(219,183,22)" rx="2" ry="2" />
<text  x="14.94" y="447.5" ></text>
</g>
<g >
<title>start_thread (16 samples, 0.53%)</title><rect x="11.5" y="517" width="6.2" height="15.0" fill="rgb(224,62,38)" rx="2" ry="2" />
<text  x="14.55" y="527.5" ></text>
</g>
<g >
<title>GCHeapLog::log_heap(CollectedHeap*, bool) [clone .part.31] (1 samples, 0.03%)</title><rect x="27.8" y="341" width="0.4" height="15.0" fill="rgb(213,50,35)" rx="2" ry="2" />
<text  x="30.81" y="351.5" ></text>
</g>
<g >
<title>Main.count      (5 samples, 0.16%)</title><rect x="61.5" y="389" width="1.9" height="15.0" fill="rgb(231,154,17)" rx="2" ry="2" />
<text  x="64.51" y="399.5" ></text>
</g>
<g >
<title>Compile::Optimize() (2 samples, 0.07%)</title><rect x="10.8" y="389" width="0.7" height="15.0" fill="rgb(242,166,0)" rx="2" ry="2" />
<text  x="13.77" y="399.5" ></text>
</g>
<g >
<title>irq_exit (1 samples, 0.03%)</title><rect x="209.8" y="309" width="0.4" height="15.0" fill="rgb(207,9,31)" rx="2" ry="2" />
<text  x="212.83" y="319.5" ></text>
</g>
<g >
<title>frame::oops_interpreted_do(OopClosure*, RegisterMap const*, bool)      (1 samples, 0.03%)</title><rect x="13.1" y="421" width="0.4" height="15.0" fill="rgb(244,106,40)" rx="2" ry="2" />
<text  x="16.10" y="431.5" ></text>
</g>
<g >
<title>[UNKNOWN]      (1 samples, 0.03%)</title><rect x="20.8" y="389" width="0.4" height="15.0" fill="rgb(252,10,8)" rx="2" ry="2" />
<text  x="23.84" y="399.5" ></text>
</g>
<g >
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (2 samples, 0.07%)</title><rect x="10.0" y="405" width="0.8" height="15.0" fill="rgb(236,3,31)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>vfprintf      (2 samples, 0.07%)</title><rect x="18.5" y="485" width="0.8" height="15.0" fill="rgb(218,197,31)" rx="2" ry="2" />
<text  x="21.52" y="495.5" ></text>
</g>
<g >
<title>Interpreter (388 samples, 12.73%)</title><rect x="61.5" y="405" width="150.3" height="15.0" fill="rgb(221,176,12)" rx="2" ry="2" />
<text  x="64.51" y="415.5" >Interpreter</text>
</g>
<g >
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const      (1 samples, 0.03%)</title><rect x="714.8" y="309" width="0.4" height="15.0" fill="rgb(249,105,25)" rx="2" ry="2" />
<text  x="717.82" y="319.5" ></text>
</g>
<g >
<title>__pthread_mutex_trylock      (2 samples, 0.07%)</title><rect x="56.5" y="501" width="0.7" height="15.0" fill="rgb(248,173,9)" rx="2" ry="2" />
<text  x="59.47" y="511.5" ></text>
</g>
<g >
<title>ParGC Thread#0 (16 samples, 0.53%)</title><rect x="11.5" y="533" width="6.2" height="15.0" fill="rgb(214,51,33)" rx="2" ry="2" />
<text  x="14.55" y="543.5" ></text>
</g>
<g >
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (2 samples, 0.07%)</title><rect x="838.4" y="325" width="0.7" height="15.0" fill="rgb(246,177,32)" rx="2" ry="2" />
<text  x="841.36" y="335.5" ></text>
</g>
<g >
<title>Main.main (2,381 samples, 78.14%)</title><rect x="267.9" y="405" width="922.1" height="15.0" fill="rgb(209,5,25)" rx="2" ry="2" />
<text  x="270.92" y="415.5" >Main.main</text>
</g>
<g >
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (2 samples, 0.07%)</title><rect x="10.8" y="437" width="0.7" height="15.0" fill="rgb(219,107,42)" rx="2" ry="2" />
<text  x="13.77" y="447.5" ></text>
</g>
<g >
<title>[UNKNOWN] (2 samples, 0.07%)</title><rect x="56.5" y="517" width="0.7" height="15.0" fill="rgb(239,107,40)" rx="2" ry="2" />
<text  x="59.47" y="527.5" ></text>
</g>
<g >
<title>Main.loop      (17 samples, 0.56%)</title><rect x="63.4" y="389" width="6.6" height="15.0" fill="rgb(214,221,28)" rx="2" ry="2" />
<text  x="66.44" y="399.5" ></text>
</g>
<g >
<title>frame::sender(RegisterMap*) const      (1 samples, 0.03%)</title><rect x="22.0" y="373" width="0.4" height="15.0" fill="rgb(213,48,0)" rx="2" ry="2" />
<text  x="25.01" y="383.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="1189.6" y="373" width="0.4" height="15.0" fill="rgb(205,41,10)" rx="2" ry="2" />
<text  x="1192.61" y="383.5" ></text>
</g>
<g >
<title>start_thread (2 samples, 0.07%)</title><rect x="17.7" y="517" width="0.8" height="15.0" fill="rgb(253,99,8)" rx="2" ry="2" />
<text  x="20.75" y="527.5" ></text>
</g>
<g >
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (2 samples, 0.07%)</title><rect x="10.0" y="69" width="0.8" height="15.0" fill="rgb(215,28,50)" rx="2" ry="2" />
<text  x="13.00" y="79.5" ></text>
</g>
<g >
<title>irq_exit (2 samples, 0.07%)</title><rect x="1112.5" y="325" width="0.8" height="15.0" fill="rgb(213,40,33)" rx="2" ry="2" />
<text  x="1115.55" y="335.5" ></text>
</g>
<g >
<title>JavaThread::nmethods_do(CodeBlobClosure*) [clone .part.70] (2 samples, 0.07%)</title><rect x="21.6" y="389" width="0.8" height="15.0" fill="rgb(236,42,25)" rx="2" ry="2" />
<text  x="24.62" y="399.5" ></text>
</g>
<g >
<title>vgdrvHeartbeatTimerHandler (1 samples, 0.03%)</title><rect x="841.5" y="245" width="0.3" height="15.0" fill="rgb(220,180,21)" rx="2" ry="2" />
<text  x="844.46" y="255.5" ></text>
</g>
<g >
<title>VM Thread (39 samples, 1.28%)</title><rect x="18.5" y="533" width="15.1" height="15.0" fill="rgb(249,123,17)" rx="2" ry="2" />
<text  x="21.52" y="543.5" ></text>
</g>
<g >
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (2 samples, 0.07%)</title><rect x="10.0" y="277" width="0.8" height="15.0" fill="rgb(215,215,8)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>CollectedHeap::fill_with_dummy_object(HeapWordImpl**, HeapWordImpl**, bool)      (1 samples, 0.03%)</title><rect x="713.3" y="277" width="0.4" height="15.0" fill="rgb(209,176,21)" rx="2" ry="2" />
<text  x="716.28" y="287.5" ></text>
</g>
<g >
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (2 samples, 0.07%)</title><rect x="10.8" y="421" width="0.7" height="15.0" fill="rgb(247,214,10)" rx="2" ry="2" />
<text  x="13.77" y="431.5" ></text>
</g>
<g >
<title>ParallelScavengeHeap::failed_mem_allocate(unsigned long) (13 samples, 0.43%)</title><rect x="27.8" y="389" width="5.0" height="15.0" fill="rgb(243,152,11)" rx="2" ry="2" />
<text  x="30.81" y="399.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.03%)</title><rect x="716.4" y="293" width="0.4" height="15.0" fill="rgb(250,16,2)" rx="2" ry="2" />
<text  x="719.37" y="303.5" ></text>
</g>
<g >
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWordImpl**, unsigned long, unsigned long, Thread*) (1 samples, 0.03%)</title><rect x="183.9" y="293" width="0.4" height="15.0" fill="rgb(213,24,10)" rx="2" ry="2" />
<text  x="186.88" y="303.5" ></text>
</g>
<g >
<title>ReferenceProcessorPhaseTimes::print_all_references(unsigned int, bool) const (1 samples, 0.03%)</title><rect x="29.0" y="341" width="0.4" height="15.0" fill="rgb(241,1,44)" rx="2" ry="2" />
<text  x="31.98" y="351.5" ></text>
</g>
<g >
<title>Klass::check_array_allocation_length(int, int, Thread*)      (1 samples, 0.03%)</title><rect x="712.5" y="325" width="0.4" height="15.0" fill="rgb(231,219,37)" rx="2" ry="2" />
<text  x="715.50" y="335.5" ></text>
</g>
<g >
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (2 samples, 0.07%)</title><rect x="10.0" y="85" width="0.8" height="15.0" fill="rgb(235,98,22)" rx="2" ry="2" />
<text  x="13.00" y="95.5" ></text>
</g>
<g >
<title>kfree      (1 samples, 0.03%)</title><rect x="1189.2" y="293" width="0.4" height="15.0" fill="rgb(237,14,13)" rx="2" ry="2" />
<text  x="1192.23" y="303.5" ></text>
</g>
<g >
<title>java.util.HashMap.resize      (195 samples, 6.40%)</title><rect x="1113.3" y="357" width="75.5" height="15.0" fill="rgb(223,95,10)" rx="2" ry="2" />
<text  x="1116.32" y="367.5" >java.uti..</text>
</g>
<g >
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (2 samples, 0.07%)</title><rect x="10.0" y="213" width="0.8" height="15.0" fill="rgb(230,146,0)" rx="2" ry="2" />
<text  x="13.00" y="223.5" ></text>
</g>
<g >
<title>finish_task_switch      (1 samples, 0.03%)</title><rect x="1188.8" y="277" width="0.4" height="15.0" fill="rgb(208,192,2)" rx="2" ry="2" />
<text  x="1191.84" y="287.5" ></text>
</g>
<g >
<title>Main.loop (865 samples, 28.39%)</title><rect x="854.6" y="389" width="335.0" height="15.0" fill="rgb(207,35,34)" rx="2" ry="2" />
<text  x="857.63" y="399.5" >Main.loop</text>
</g>
<g >
<title>Main.count      (292 samples, 9.58%)</title><rect x="70.0" y="373" width="113.1" height="15.0" fill="rgb(231,150,1)" rx="2" ry="2" />
<text  x="73.03" y="383.5" >Main.count     </text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.03%)</title><rect x="210.2" y="325" width="0.4" height="15.0" fill="rgb(231,126,12)" rx="2" ry="2" />
<text  x="213.22" y="335.5" ></text>
</g>
<g >
<title>[UNKNOWN]      (2 samples, 0.07%)</title><rect x="838.4" y="293" width="0.7" height="15.0" fill="rgb(254,178,38)" rx="2" ry="2" />
<text  x="841.36" y="303.5" ></text>
</g>
</g>
</svg>
