<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="374.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="357" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="357" > </text>
<g id="frames">
<g >
<title>__schedule (162 samples, 0.03%)</title><rect x="952.6" y="69" width="0.3" height="15.0" fill="rgb(248,27,40)" rx="2" ry="2" />
<text  x="955.56" y="79.5" ></text>
</g>
<g >
<title>Thread::call_run() (266 samples, 0.05%)</title><rect x="19.1" y="261" width="0.6" height="15.0" fill="rgb(239,84,24)" rx="2" ry="2" />
<text  x="22.06" y="271.5" ></text>
</g>
<g >
<title>      (885 samples, 0.18%)</title><rect x="23.7" y="293" width="2.1" height="15.0" fill="rgb(228,141,35)" rx="2" ry="2" />
<text  x="26.66" y="303.5" ></text>
</g>
<g >
<title>do_futex (205 samples, 0.04%)</title><rect x="18.4" y="229" width="0.5" height="15.0" fill="rgb(219,19,15)" rx="2" ry="2" />
<text  x="21.41" y="239.5" ></text>
</g>
<g >
<title>__schedule (95 samples, 0.02%)</title><rect x="18.6" y="165" width="0.3" height="15.0" fill="rgb(212,77,30)" rx="2" ry="2" />
<text  x="21.63" y="175.5" ></text>
</g>
<g >
<title>JavaThread::oops_do_frames(OopClosure*, CodeBlobClosure*) [clone .part.0] (369 samples, 0.07%)</title><rect x="16.8" y="165" width="0.9" height="15.0" fill="rgb(242,64,45)" rx="2" ry="2" />
<text  x="19.83" y="175.5" ></text>
</g>
<g >
<title>PSPromotionManager::drain_stacks_depth(bool) (1,632 samples, 0.33%)</title><rect x="12.9" y="181" width="3.9" height="15.0" fill="rgb(236,141,36)" rx="2" ry="2" />
<text  x="15.89" y="191.5" ></text>
</g>
<g >
<title>      (169 samples, 0.03%)</title><rect x="10.3" y="293" width="0.4" height="15.0" fill="rgb(235,223,1)" rx="2" ry="2" />
<text  x="13.27" y="303.5" ></text>
</g>
<g >
<title>PSThreadRootsTaskClosure::do_thread(Thread*) (2,816 samples, 0.57%)</title><rect x="11.2" y="197" width="6.7" height="15.0" fill="rgb(232,53,41)" rx="2" ry="2" />
<text  x="14.19" y="207.5" ></text>
</g>
<g >
<title>PSScavenge::invoke_no_policy() (732 samples, 0.15%)</title><rect x="21.8" y="133" width="1.7" height="15.0" fill="rgb(212,189,40)" rx="2" ry="2" />
<text  x="24.75" y="143.5" ></text>
</g>
<g >
<title>start_thread (266 samples, 0.05%)</title><rect x="19.1" y="293" width="0.6" height="15.0" fill="rgb(218,152,29)" rx="2" ry="2" />
<text  x="22.06" y="303.5" ></text>
</g>
<g >
<title>ParallelScavengeHeap::failed_mem_allocate(unsigned long) (849 samples, 0.17%)</title><rect x="21.6" y="165" width="2.0" height="15.0" fill="rgb(248,56,1)" rx="2" ry="2" />
<text  x="24.57" y="175.5" ></text>
</g>
<g >
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (219 samples, 0.04%)</title><rect x="950.7" y="69" width="0.5" height="15.0" fill="rgb(228,22,25)" rx="2" ry="2" />
<text  x="953.68" y="79.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (90 samples, 0.02%)</title><rect x="952.0" y="133" width="0.2" height="15.0" fill="rgb(221,171,1)" rx="2" ry="2" />
<text  x="955.02" y="143.5" ></text>
</g>
<g >
<title>JavaMain (490,339 samples, 98.64%)</title><rect x="26.1" y="261" width="1163.9" height="15.0" fill="rgb(248,58,42)" rx="2" ry="2" />
<text  x="29.05" y="271.5" >JavaMain</text>
</g>
<g >
<title>Interpreter      (2,513 samples, 0.51%)</title><rect x="26.1" y="181" width="6.0" height="15.0" fill="rgb(209,147,37)" rx="2" ry="2" />
<text  x="29.14" y="191.5" ></text>
</g>
<g >
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*)      (76 samples, 0.02%)</title><rect x="949.9" y="117" width="0.2" height="15.0" fill="rgb(219,33,30)" rx="2" ry="2" />
<text  x="952.93" y="127.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms      (49 samples, 0.01%)</title><rect x="951.5" y="69" width="0.1" height="15.0" fill="rgb(241,43,25)" rx="2" ry="2" />
<text  x="954.50" y="79.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (239 samples, 0.05%)</title><rect x="18.4" y="277" width="0.5" height="15.0" fill="rgb(236,209,17)" rx="2" ry="2" />
<text  x="21.37" y="287.5" ></text>
</g>
<g >
<title>Main.loop      (16,488 samples, 3.32%)</title><rect x="55.6" y="165" width="39.1" height="15.0" fill="rgb(220,74,43)" rx="2" ry="2" />
<text  x="58.59" y="175.5" >Mai..</text>
</g>
<g >
<title>Main.count (100,735 samples, 20.26%)</title><rect x="948.9" y="149" width="239.1" height="15.0" fill="rgb(214,61,8)" rx="2" ry="2" />
<text  x="951.90" y="159.5" >Main.count</text>
</g>
<g >
<title>call_stub (490,339 samples, 98.64%)</title><rect x="26.1" y="197" width="1163.9" height="15.0" fill="rgb(246,111,45)" rx="2" ry="2" />
<text  x="29.05" y="207.5" >call_stub</text>
</g>
<g >
<title>java.util.HashMap.resize      (716 samples, 0.14%)</title><rect x="1188.1" y="149" width="1.7" height="15.0" fill="rgb(248,86,5)" rx="2" ry="2" />
<text  x="1191.14" y="159.5" ></text>
</g>
<g >
<title>asm_call_irq_on_stack (64 samples, 0.01%)</title><rect x="952.1" y="69" width="0.1" height="15.0" fill="rgb(236,24,27)" rx="2" ry="2" />
<text  x="955.08" y="79.5" ></text>
</g>
<g >
<title>__new_sem_post (49 samples, 0.01%)</title><rect x="17.9" y="229" width="0.1" height="15.0" fill="rgb(232,192,8)" rx="2" ry="2" />
<text  x="20.91" y="239.5" ></text>
</g>
<g >
<title>PeriodicTask::real_time_tick(int) (95 samples, 0.02%)</title><rect x="19.2" y="229" width="0.2" height="15.0" fill="rgb(216,221,0)" rx="2" ry="2" />
<text  x="22.15" y="239.5" ></text>
</g>
<g >
<title>ThreadJavaMain (490,339 samples, 98.64%)</title><rect x="26.1" y="277" width="1163.9" height="15.0" fill="rgb(207,98,44)" rx="2" ry="2" />
<text  x="29.05" y="287.5" >ThreadJavaMain</text>
</g>
<g >
<title>void OopOopIterateBackwardsDispatch&lt;PSPushContentsClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, narrowOop&gt;(PSPushContentsClosure*, oopDesc*, Klass*)      (246 samples, 0.05%)</title><rect x="16.1" y="149" width="0.6" height="15.0" fill="rgb(236,184,34)" rx="2" ry="2" />
<text  x="19.09" y="159.5" ></text>
</g>
<g >
<title>jni_CallStaticVoidMethod (490,339 samples, 98.64%)</title><rect x="26.1" y="245" width="1163.9" height="15.0" fill="rgb(212,157,21)" rx="2" ry="2" />
<text  x="29.05" y="255.5" >jni_CallStaticVoidMethod</text>
</g>
<g >
<title>[UNKNOWN] (56 samples, 0.01%)</title><rect x="25.8" y="293" width="0.1" height="15.0" fill="rgb(247,198,3)" rx="2" ry="2" />
<text  x="28.76" y="303.5" ></text>
</g>
<g >
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*)      (51 samples, 0.01%)</title><rect x="1185.5" y="101" width="0.1" height="15.0" fill="rgb(220,40,51)" rx="2" ry="2" />
<text  x="1188.46" y="111.5" ></text>
</g>
<g >
<title>start_thread (1,059 samples, 0.21%)</title><rect x="21.1" y="293" width="2.6" height="15.0" fill="rgb(254,5,44)" rx="2" ry="2" />
<text  x="24.15" y="303.5" ></text>
</g>
<g >
<title>futex_wait (199 samples, 0.04%)</title><rect x="18.4" y="213" width="0.5" height="15.0" fill="rgb(228,128,32)" rx="2" ry="2" />
<text  x="21.42" y="223.5" ></text>
</g>
<g >
<title>PSPromotionManager::process_array_chunk(PartialArrayScanTask)      (73 samples, 0.01%)</title><rect x="12.9" y="165" width="0.2" height="15.0" fill="rgb(244,141,45)" rx="2" ry="2" />
<text  x="15.89" y="175.5" ></text>
</g>
<g >
<title>SafepointSynchronize::begin() (86 samples, 0.02%)</title><rect x="21.2" y="213" width="0.3" height="15.0" fill="rgb(210,112,10)" rx="2" ry="2" />
<text  x="24.25" y="223.5" ></text>
</g>
<g >
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (490,339 samples, 98.64%)</title><rect x="26.1" y="213" width="1163.9" height="15.0" fill="rgb(210,18,32)" rx="2" ry="2" />
<text  x="29.05" y="223.5" >JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*)</text>
</g>
<g >
<title>__softirqentry_text_start (51 samples, 0.01%)</title><rect x="952.1" y="53" width="0.1" height="15.0" fill="rgb(239,20,32)" rx="2" ry="2" />
<text  x="955.11" y="63.5" ></text>
</g>
<g >
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*)      (71 samples, 0.01%)</title><rect x="951.8" y="117" width="0.2" height="15.0" fill="rgb(227,188,53)" rx="2" ry="2" />
<text  x="954.85" y="127.5" ></text>
</g>
<g >
<title>jni_invoke_static(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.1] (490,339 samples, 98.64%)</title><rect x="26.1" y="229" width="1163.9" height="15.0" fill="rgb(236,66,28)" rx="2" ry="2" />
<text  x="29.05" y="239.5" >jni_invoke_static(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .constprop.1]</text>
</g>
<g >
<title>exit_to_user_mode_prepare (163 samples, 0.03%)</title><rect x="952.6" y="101" width="0.3" height="15.0" fill="rgb(221,163,8)" rx="2" ry="2" />
<text  x="955.56" y="111.5" ></text>
</g>
<g >
<title>__vfprintf_internal      (85 samples, 0.02%)</title><rect x="20.4" y="261" width="0.2" height="15.0" fill="rgb(247,80,3)" rx="2" ry="2" />
<text  x="23.38" y="271.5" ></text>
</g>
<g >
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const      (73 samples, 0.01%)</title><rect x="950.5" y="69" width="0.2" height="15.0" fill="rgb(250,79,2)" rx="2" ry="2" />
<text  x="953.50" y="79.5" ></text>
</g>
<g >
<title>_new_array_Java (975 samples, 0.20%)</title><rect x="1185.4" y="117" width="2.3" height="15.0" fill="rgb(205,136,24)" rx="2" ry="2" />
<text  x="1188.42" y="127.5" ></text>
</g>
<g >
<title>__tls_get_addr      (47 samples, 0.01%)</title><rect x="951.7" y="85" width="0.1" height="15.0" fill="rgb(213,221,26)" rx="2" ry="2" />
<text  x="954.70" y="95.5" ></text>
</g>
<g >
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (732 samples, 0.15%)</title><rect x="950.1" y="117" width="1.7" height="15.0" fill="rgb(217,167,18)" rx="2" ry="2" />
<text  x="953.11" y="127.5" ></text>
</g>
<g >
<title>__memset_avx2_erms      (345 samples, 0.07%)</title><rect x="1186.7" y="53" width="0.8" height="15.0" fill="rgb(235,68,48)" rx="2" ry="2" />
<text  x="1189.66" y="63.5" ></text>
</g>
<g >
<title>Main.count      (9,856 samples, 1.98%)</title><rect x="32.2" y="165" width="23.4" height="15.0" fill="rgb(217,223,33)" rx="2" ry="2" />
<text  x="35.18" y="175.5" >M..</text>
</g>
<g >
<title>      (183 samples, 0.04%)</title><rect x="19.7" y="293" width="0.4" height="15.0" fill="rgb(235,208,12)" rx="2" ry="2" />
<text  x="22.69" y="303.5" ></text>
</g>
<g >
<title>do_softirq_own_stack (64 samples, 0.01%)</title><rect x="952.1" y="85" width="0.1" height="15.0" fill="rgb(228,49,29)" rx="2" ry="2" />
<text  x="955.08" y="95.5" ></text>
</g>
<g >
<title>ParallelScavengeHeap::print_on(outputStream*) const (62 samples, 0.01%)</title><rect x="21.9" y="101" width="0.2" height="15.0" fill="rgb(225,94,3)" rx="2" ry="2" />
<text  x="24.92" y="111.5" ></text>
</g>
<g >
<title>oopDesc* PSPromotionManager::copy_to_survivor_space&lt;false&gt;(oopDesc*) (279 samples, 0.06%)</title><rect x="16.0" y="165" width="0.7" height="15.0" fill="rgb(232,57,4)" rx="2" ry="2" />
<text  x="19.01" y="175.5" ></text>
</g>
<g >
<title>finish_task_switch      (95 samples, 0.02%)</title><rect x="18.6" y="149" width="0.3" height="15.0" fill="rgb(205,52,39)" rx="2" ry="2" />
<text  x="21.63" y="159.5" ></text>
</g>
<g >
<title>MemAllocator::allocate() const (232 samples, 0.05%)</title><rect x="949.1" y="85" width="0.6" height="15.0" fill="rgb(232,57,43)" rx="2" ry="2" />
<text  x="952.13" y="95.5" ></text>
</g>
<g >
<title>__x64_sys_futex (43 samples, 0.01%)</title><rect x="17.9" y="181" width="0.1" height="15.0" fill="rgb(239,64,28)" rx="2" ry="2" />
<text  x="20.92" y="191.5" ></text>
</g>
<g >
<title>_new_instance_Java (917 samples, 0.18%)</title><rect x="949.8" y="133" width="2.2" height="15.0" fill="rgb(212,197,33)" rx="2" ry="2" />
<text  x="952.84" y="143.5" ></text>
</g>
<g >
<title>irq_exit_rcu (64 samples, 0.01%)</title><rect x="952.1" y="101" width="0.1" height="15.0" fill="rgb(235,110,7)" rx="2" ry="2" />
<text  x="955.08" y="111.5" ></text>
</g>
<g >
<title>VMThread::run() (1,044 samples, 0.21%)</title><rect x="21.2" y="245" width="2.4" height="15.0" fill="rgb(238,144,23)" rx="2" ry="2" />
<text  x="24.16" y="255.5" ></text>
</g>
<g >
<title>do_syscall_64 (236 samples, 0.05%)</title><rect x="18.4" y="261" width="0.5" height="15.0" fill="rgb(212,157,8)" rx="2" ry="2" />
<text  x="21.38" y="271.5" ></text>
</g>
<g >
<title>java.util.HashMap.resize (1,106 samples, 0.22%)</title><rect x="1185.4" y="133" width="2.6" height="15.0" fill="rgb(226,161,12)" rx="2" ry="2" />
<text  x="1188.39" y="143.5" ></text>
</g>
<g >
<title>thread_native_entry(Thread*) (266 samples, 0.05%)</title><rect x="19.1" y="277" width="0.6" height="15.0" fill="rgb(227,169,26)" rx="2" ry="2" />
<text  x="22.06" y="287.5" ></text>
</g>
<g >
<title>Thread::call_run() (1,059 samples, 0.21%)</title><rect x="21.1" y="261" width="2.6" height="15.0" fill="rgb(211,96,22)" rx="2" ry="2" />
<text  x="24.15" y="271.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (43 samples, 0.01%)</title><rect x="25.9" y="277" width="0.2" height="15.0" fill="rgb(217,225,47)" rx="2" ry="2" />
<text  x="28.95" y="287.5" ></text>
</g>
<g >
<title>java.util.HashMap.resize      (97,927 samples, 19.70%)</title><rect x="952.9" y="133" width="232.5" height="15.0" fill="rgb(213,27,23)" rx="2" ry="2" />
<text  x="955.94" y="143.5" >java.util.HashMap.resize     </text>
</g>
<g >
<title>VM Thread (1,673 samples, 0.34%)</title><rect x="19.7" y="309" width="4.0" height="15.0" fill="rgb(243,211,22)" rx="2" ry="2" />
<text  x="22.69" y="319.5" ></text>
</g>
<g >
<title>Main.count      (359,852 samples, 72.39%)</title><rect x="94.7" y="149" width="854.2" height="15.0" fill="rgb(234,184,52)" rx="2" ry="2" />
<text  x="97.73" y="159.5" >Main.count     </text>
</g>
<g >
<title>_IO_default_xsputn      (48 samples, 0.01%)</title><rect x="20.7" y="293" width="0.1" height="15.0" fill="rgb(215,70,37)" rx="2" ry="2" />
<text  x="23.70" y="303.5" ></text>
</g>
<g >
<title>asm_sysvec_irq_work (301 samples, 0.06%)</title><rect x="952.2" y="133" width="0.7" height="15.0" fill="rgb(207,67,10)" rx="2" ry="2" />
<text  x="955.23" y="143.5" ></text>
</g>
<g >
<title>[UNKNOWN] (235 samples, 0.05%)</title><rect x="20.1" y="293" width="0.6" height="15.0" fill="rgb(214,161,44)" rx="2" ry="2" />
<text  x="23.14" y="303.5" ></text>
</g>
<g >
<title>ScavengeRootsTask::work(unsigned int) (2,927 samples, 0.59%)</title><rect x="10.9" y="229" width="7.0" height="15.0" fill="rgb(225,134,2)" rx="2" ry="2" />
<text  x="13.93" y="239.5" ></text>
</g>
<g >
<title>PSPromotionManager::drain_stacks_depth(bool)      (703 samples, 0.14%)</title><rect x="11.2" y="181" width="1.7" height="15.0" fill="rgb(208,157,6)" rx="2" ry="2" />
<text  x="14.22" y="191.5" ></text>
</g>
<g >
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (2,818 samples, 0.57%)</title><rect x="11.2" y="213" width="6.7" height="15.0" fill="rgb(236,125,29)" rx="2" ry="2" />
<text  x="14.19" y="223.5" ></text>
</g>
<g >
<title>ThreadLocalAllocBuffer::retire_before_allocation() (86 samples, 0.02%)</title><rect x="1186.2" y="37" width="0.2" height="15.0" fill="rgb(232,57,17)" rx="2" ry="2" />
<text  x="1189.17" y="47.5" ></text>
</g>
<g >
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (807 samples, 0.16%)</title><rect x="1185.7" y="85" width="1.9" height="15.0" fill="rgb(217,34,2)" rx="2" ry="2" />
<text  x="1188.69" y="95.5" ></text>
</g>
<g >
<title>futex_wait_queue_me (155 samples, 0.03%)</title><rect x="18.5" y="197" width="0.4" height="15.0" fill="rgb(226,215,13)" rx="2" ry="2" />
<text  x="21.49" y="207.5" ></text>
</g>
<g >
<title>__pthread_cond_timedwait (239 samples, 0.05%)</title><rect x="18.4" y="293" width="0.5" height="15.0" fill="rgb(207,193,6)" rx="2" ry="2" />
<text  x="21.37" y="303.5" ></text>
</g>
<g >
<title>PSCardTable::scavenge_contents_parallel(ObjectStartArray*, MutableSpace*, HeapWordImpl**, PSPromotionManager*, unsigned int, unsigned int)      (65 samples, 0.01%)</title><rect x="10.9" y="213" width="0.2" height="15.0" fill="rgb(210,188,53)" rx="2" ry="2" />
<text  x="13.94" y="223.5" ></text>
</g>
<g >
<title>ThreadLocalAllocBuffer::retire_before_allocation() (120 samples, 0.02%)</title><rect x="950.9" y="53" width="0.3" height="15.0" fill="rgb(244,152,24)" rx="2" ry="2" />
<text  x="953.91" y="63.5" ></text>
</g>
<g >
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (263 samples, 0.05%)</title><rect x="949.1" y="101" width="0.6" height="15.0" fill="rgb(236,113,52)" rx="2" ry="2" />
<text  x="952.08" y="111.5" ></text>
</g>
<g >
<title>java (491,364 samples, 98.84%)</title><rect x="23.7" y="309" width="1166.3" height="15.0" fill="rgb(254,78,30)" rx="2" ry="2" />
<text  x="26.66" y="319.5" >java</text>
</g>
<g >
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (162 samples, 0.03%)</title><rect x="1186.0" y="53" width="0.4" height="15.0" fill="rgb(247,128,38)" rx="2" ry="2" />
<text  x="1188.99" y="63.5" ></text>
</g>
<g >
<title>do_syscall_64 (43 samples, 0.01%)</title><rect x="19.6" y="197" width="0.1" height="15.0" fill="rgb(254,155,3)" rx="2" ry="2" />
<text  x="22.57" y="207.5" ></text>
</g>
<g >
<title>VM Periodic Tas (660 samples, 0.13%)</title><rect x="18.1" y="309" width="1.6" height="15.0" fill="rgb(213,113,25)" rx="2" ry="2" />
<text  x="21.12" y="319.5" ></text>
</g>
<g >
<title>_new_array_Java (339 samples, 0.07%)</title><rect x="949.0" y="133" width="0.8" height="15.0" fill="rgb(234,214,45)" rx="2" ry="2" />
<text  x="951.98" y="143.5" ></text>
</g>
<g >
<title>irqentry_exit_to_user_mode (301 samples, 0.06%)</title><rect x="952.2" y="117" width="0.7" height="15.0" fill="rgb(242,176,33)" rx="2" ry="2" />
<text  x="955.23" y="127.5" ></text>
</g>
<g >
<title>frame::oops_do(OopClosure*, CodeBlobClosure*, RegisterMap const*) const (55 samples, 0.01%)</title><rect x="17.2" y="149" width="0.1" height="15.0" fill="rgb(242,81,45)" rx="2" ry="2" />
<text  x="20.20" y="159.5" ></text>
</g>
<g >
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWordImpl**, unsigned long, unsigned long, Thread*) (62 samples, 0.01%)</title><rect x="950.3" y="69" width="0.1" height="15.0" fill="rgb(224,69,30)" rx="2" ry="2" />
<text  x="953.28" y="79.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (49 samples, 0.01%)</title><rect x="17.9" y="213" width="0.1" height="15.0" fill="rgb(208,18,45)" rx="2" ry="2" />
<text  x="20.91" y="223.5" ></text>
</g>
<g >
<title>thread_native_entry(Thread*) (1,059 samples, 0.21%)</title><rect x="21.1" y="277" width="2.6" height="15.0" fill="rgb(212,155,34)" rx="2" ry="2" />
<text  x="24.15" y="287.5" ></text>
</g>
<g >
<title>WeakProcessor::weak_oops_do(BoolObjectClosure*, OopClosure*) (46 samples, 0.01%)</title><rect x="23.2" y="117" width="0.1" height="15.0" fill="rgb(207,97,13)" rx="2" ry="2" />
<text  x="26.19" y="127.5" ></text>
</g>
<g >
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (871 samples, 0.18%)</title><rect x="1185.6" y="101" width="2.1" height="15.0" fill="rgb(231,16,51)" rx="2" ry="2" />
<text  x="1188.58" y="111.5" ></text>
</g>
<g >
<title>asm_sysvec_irq_work (87 samples, 0.02%)</title><rect x="1187.8" y="117" width="0.2" height="15.0" fill="rgb(230,149,16)" rx="2" ry="2" />
<text  x="1190.81" y="127.5" ></text>
</g>
<g >
<title>VM_Operation::evaluate() (871 samples, 0.18%)</title><rect x="21.5" y="197" width="2.1" height="15.0" fill="rgb(242,65,35)" rx="2" ry="2" />
<text  x="24.54" y="207.5" ></text>
</g>
<g >
<title>VMThread::evaluate_operation(VM_Operation*) (874 samples, 0.18%)</title><rect x="21.5" y="213" width="2.1" height="15.0" fill="rgb(218,111,26)" rx="2" ry="2" />
<text  x="24.53" y="223.5" ></text>
</g>
<g >
<title>WeakProcessor::weak_oops_do(BoolObjectClosure*, OopClosure*)      (123 samples, 0.02%)</title><rect x="22.9" y="117" width="0.3" height="15.0" fill="rgb(209,72,6)" rx="2" ry="2" />
<text  x="25.90" y="127.5" ></text>
</g>
<g >
<title>pthread_cond_broadcast@@GLIBC_2.3.2 (43 samples, 0.01%)</title><rect x="25.9" y="293" width="0.2" height="15.0" fill="rgb(252,85,33)" rx="2" ry="2" />
<text  x="28.95" y="303.5" ></text>
</g>
<g >
<title>start_thread (3,038 samples, 0.61%)</title><rect x="10.8" y="293" width="7.2" height="15.0" fill="rgb(209,203,53)" rx="2" ry="2" />
<text  x="13.84" y="303.5" ></text>
</g>
<g >
<title>GangWorker::loop() (3,027 samples, 0.61%)</title><rect x="10.8" y="245" width="7.2" height="15.0" fill="rgb(229,194,31)" rx="2" ry="2" />
<text  x="13.85" y="255.5" ></text>
</g>
<g >
<title>finish_task_switch      (162 samples, 0.03%)</title><rect x="952.6" y="53" width="0.3" height="15.0" fill="rgb(207,74,53)" rx="2" ry="2" />
<text  x="955.56" y="63.5" ></text>
</g>
<g >
<title>InstanceKlass::allocate_objArray(int, int, Thread*)      (46 samples, 0.01%)</title><rect x="1185.6" y="85" width="0.1" height="15.0" fill="rgb(252,144,7)" rx="2" ry="2" />
<text  x="1188.58" y="95.5" ></text>
</g>
<g >
<title>start_thread (490,339 samples, 98.64%)</title><rect x="26.1" y="293" width="1163.9" height="15.0" fill="rgb(205,148,31)" rx="2" ry="2" />
<text  x="29.05" y="303.5" >start_thread</text>
</g>
<g >
<title>__x64_sys_futex (219 samples, 0.04%)</title><rect x="18.4" y="245" width="0.5" height="15.0" fill="rgb(230,176,44)" rx="2" ry="2" />
<text  x="21.40" y="255.5" ></text>
</g>
<g >
<title>VM_ParallelGCFailedAllocation::doit() (858 samples, 0.17%)</title><rect x="21.6" y="181" width="2.0" height="15.0" fill="rgb(220,150,29)" rx="2" ry="2" />
<text  x="24.57" y="191.5" ></text>
</g>
<g >
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (281 samples, 0.06%)</title><rect x="949.0" y="117" width="0.7" height="15.0" fill="rgb(237,137,4)" rx="2" ry="2" />
<text  x="952.04" y="127.5" ></text>
</g>
<g >
<title>Attach Listener (102 samples, 0.02%)</title><rect x="10.0" y="309" width="0.2" height="15.0" fill="rgb(230,120,44)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>exit_to_user_mode_prepare      (138 samples, 0.03%)</title><rect x="952.2" y="101" width="0.4" height="15.0" fill="rgb(235,177,24)" rx="2" ry="2" />
<text  x="955.23" y="111.5" ></text>
</g>
<g >
<title>SafepointSynchronize::do_cleanup_tasks() (49 samples, 0.01%)</title><rect x="21.3" y="197" width="0.1" height="15.0" fill="rgb(211,139,44)" rx="2" ry="2" />
<text  x="24.28" y="207.5" ></text>
</g>
<g >
<title>WatcherThread::run() (241 samples, 0.05%)</title><rect x="19.1" y="245" width="0.6" height="15.0" fill="rgb(221,2,44)" rx="2" ry="2" />
<text  x="22.11" y="255.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (64 samples, 0.01%)</title><rect x="952.1" y="117" width="0.1" height="15.0" fill="rgb(253,140,51)" rx="2" ry="2" />
<text  x="955.08" y="127.5" ></text>
</g>
<g >
<title>InstanceKlass::allocate_instance(Thread*) (699 samples, 0.14%)</title><rect x="950.2" y="101" width="1.6" height="15.0" fill="rgb(210,4,24)" rx="2" ry="2" />
<text  x="953.15" y="111.5" ></text>
</g>
<g >
<title>PSScavenge::invoke() (835 samples, 0.17%)</title><rect x="21.6" y="149" width="2.0" height="15.0" fill="rgb(211,193,47)" rx="2" ry="2" />
<text  x="24.59" y="159.5" ></text>
</g>
<g >
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (89 samples, 0.02%)</title><rect x="949.2" y="69" width="0.3" height="15.0" fill="rgb(244,195,12)" rx="2" ry="2" />
<text  x="952.25" y="79.5" ></text>
</g>
<g >
<title>__pthread_cond_timedwait      (61 samples, 0.01%)</title><rect x="18.2" y="293" width="0.2" height="15.0" fill="rgb(250,104,15)" rx="2" ry="2" />
<text  x="21.23" y="303.5" ></text>
</g>
<g >
<title>oopDesc* PSPromotionManager::copy_to_survivor_space&lt;false&gt;(oopDesc*)      (1,226 samples, 0.25%)</title><rect x="13.1" y="165" width="2.9" height="15.0" fill="rgb(217,198,51)" rx="2" ry="2" />
<text  x="16.10" y="175.5" ></text>
</g>
<g >
<title>Interpreter (487,760 samples, 98.12%)</title><rect x="32.1" y="181" width="1157.8" height="15.0" fill="rgb(247,204,19)" rx="2" ry="2" />
<text  x="35.10" y="191.5" >Interpreter</text>
</g>
<g >
<title>GCHeapLog::log_heap(CollectedHeap*, bool) [clone .part.0] (100 samples, 0.02%)</title><rect x="21.8" y="117" width="0.3" height="15.0" fill="rgb(250,27,26)" rx="2" ry="2" />
<text  x="24.85" y="127.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (46 samples, 0.01%)</title><rect x="19.6" y="213" width="0.1" height="15.0" fill="rgb(237,89,29)" rx="2" ry="2" />
<text  x="22.56" y="223.5" ></text>
</g>
<g >
<title>MemAllocator::allocate() const (744 samples, 0.15%)</title><rect x="1185.8" y="69" width="1.8" height="15.0" fill="rgb(216,107,50)" rx="2" ry="2" />
<text  x="1188.81" y="79.5" ></text>
</g>
<g >
<title>Thread::oops_do(OopClosure*, CodeBlobClosure*) (426 samples, 0.09%)</title><rect x="16.8" y="181" width="1.0" height="15.0" fill="rgb(253,57,24)" rx="2" ry="2" />
<text  x="19.81" y="191.5" ></text>
</g>
<g >
<title>exit_to_user_mode_prepare      (50 samples, 0.01%)</title><rect x="1187.8" y="85" width="0.1" height="15.0" fill="rgb(231,29,50)" rx="2" ry="2" />
<text  x="1190.81" y="95.5" ></text>
</g>
<g >
<title>ParallelScavengeHeap::unsafe_max_tlab_alloc(Thread*) const      (56 samples, 0.01%)</title><rect x="951.3" y="69" width="0.2" height="15.0" fill="rgb(222,207,33)" rx="2" ry="2" />
<text  x="954.34" y="79.5" ></text>
</g>
<g >
<title>GC Thread#0 (3,277 samples, 0.66%)</title><rect x="10.3" y="309" width="7.7" height="15.0" fill="rgb(226,168,52)" rx="2" ry="2" />
<text  x="13.27" y="319.5" ></text>
</g>
<g >
<title>Main.loop (461,358 samples, 92.81%)</title><rect x="94.7" y="165" width="1095.1" height="15.0" fill="rgb(232,172,49)" rx="2" ry="2" />
<text  x="97.73" y="175.5" >Main.loop</text>
</g>
<g >
<title>__vsnprintf_internal (178 samples, 0.04%)</title><rect x="20.3" y="277" width="0.4" height="15.0" fill="rgb(247,52,7)" rx="2" ry="2" />
<text  x="23.25" y="287.5" ></text>
</g>
<g >
<title>VMThread::inner_execute(VM_Operation*) (1,021 samples, 0.21%)</title><rect x="21.2" y="229" width="2.4" height="15.0" fill="rgb(231,213,36)" rx="2" ry="2" />
<text  x="24.19" y="239.5" ></text>
</g>
<g >
<title>schedule (162 samples, 0.03%)</title><rect x="952.6" y="85" width="0.3" height="15.0" fill="rgb(253,44,7)" rx="2" ry="2" />
<text  x="955.56" y="95.5" ></text>
</g>
<g >
<title>irqentry_exit_to_user_mode (87 samples, 0.02%)</title><rect x="1187.8" y="101" width="0.2" height="15.0" fill="rgb(243,28,24)" rx="2" ry="2" />
<text  x="1190.81" y="111.5" ></text>
</g>
<g >
<title>MemAllocator::allocate() const (570 samples, 0.11%)</title><rect x="950.3" y="85" width="1.3" height="15.0" fill="rgb(227,132,8)" rx="2" ry="2" />
<text  x="953.28" y="95.5" ></text>
</g>
<g >
<title>Thread::call_run() (3,038 samples, 0.61%)</title><rect x="10.8" y="261" width="7.2" height="15.0" fill="rgb(228,17,4)" rx="2" ry="2" />
<text  x="13.84" y="271.5" ></text>
</g>
<g >
<title>__pthread_mutex_unlock_usercnt (46 samples, 0.01%)</title><rect x="19.6" y="229" width="0.1" height="15.0" fill="rgb(230,96,7)" rx="2" ry="2" />
<text  x="22.56" y="239.5" ></text>
</g>
<g >
<title>ParallelScavengeHeap::unsafe_max_tlab_alloc(Thread*) const      (51 samples, 0.01%)</title><rect x="1186.5" y="53" width="0.1" height="15.0" fill="rgb(206,119,39)" rx="2" ry="2" />
<text  x="1189.52" y="63.5" ></text>
</g>
<g >
<title>do_syscall_64 (48 samples, 0.01%)</title><rect x="17.9" y="197" width="0.1" height="15.0" fill="rgb(213,36,37)" rx="2" ry="2" />
<text  x="20.91" y="207.5" ></text>
</g>
<g >
<title>all (497,119 samples, 100%)</title><rect x="10.0" y="325" width="1180.0" height="15.0" fill="rgb(233,24,16)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>schedule (101 samples, 0.02%)</title><rect x="18.6" y="181" width="0.3" height="15.0" fill="rgb(223,164,3)" rx="2" ry="2" />
<text  x="21.61" y="191.5" ></text>
</g>
<g >
<title>thread_native_entry(Thread*) (3,038 samples, 0.61%)</title><rect x="10.8" y="277" width="7.2" height="15.0" fill="rgb(254,71,14)" rx="2" ry="2" />
<text  x="13.84" y="287.5" ></text>
</g>
</g>
</svg>
